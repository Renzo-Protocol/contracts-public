{
  "address": "0x1dbbF25286e9bD42Bff4d4914c60B7559F8A7be8",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DelegateAddressAlreadySet",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotNativeEthRestakeAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOperatorDelegatorAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotRestakeManager",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegateAddress",
          "type": "address"
        }
      ],
      "name": "DelegationAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IStrategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "TokenStrategyUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "withdrawRoot",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "staker",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "delegatedTo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "contract IStrategy[]",
          "name": "strategies",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "WithdrawStarted",
      "type": "event"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IStrategy[]",
              "name": "strategies",
              "type": "address[]"
            },
            {
              "internalType": "uint256[]",
              "name": "shares",
              "type": "uint256[]"
            },
            {
              "internalType": "address",
              "name": "depositor",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "withdrawer",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "nonce",
                  "type": "uint96"
                }
              ],
              "internalType": "struct IStrategyManager.WithdrawerAndNonce",
              "name": "withdrawerAndNonce",
              "type": "tuple"
            },
            {
              "internalType": "uint32",
              "name": "withdrawalStartBlock",
              "type": "uint32"
            },
            {
              "internalType": "address",
              "name": "delegatedAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IStrategyManager.QueuedWithdrawal",
          "name": "_withdrawal",
          "type": "tuple"
        },
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_middlewareTimesIndex",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_sendToAddress",
          "type": "address"
        }
      ],
      "name": "completeWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegateAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegationManager",
      "outputs": [
        {
          "internalType": "contract IDelegationManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eigenPod",
      "outputs": [
        {
          "internalType": "contract IEigenPod",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "eigenPodManager",
      "outputs": [
        {
          "internalType": "contract IEigenPodManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakedETHBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IStrategy",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "getStrategyIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "getTokenBalanceFromStrategy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoleManager",
          "name": "_roleManager",
          "type": "address"
        },
        {
          "internalType": "contract IStrategyManager",
          "name": "_strategyManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_restakeManager",
          "type": "address"
        },
        {
          "internalType": "contract IDelegationManager",
          "name": "_delegationManager",
          "type": "address"
        },
        {
          "internalType": "contract IEigenPodManager",
          "name": "_eigenPodManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "restakeManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "contract IRoleManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_delegateAddress",
          "type": "address"
        }
      ],
      "name": "setDelegateAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract IStrategy",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "setTokenStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "pubkey",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "depositDataRoot",
          "type": "bytes32"
        }
      ],
      "name": "stakeEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakedButNotVerifiedEth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "startWithdrawal",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyManager",
      "outputs": [
        {
          "internalType": "contract IStrategyManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenStrategyMapping",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "oracleBlockNumber",
          "type": "uint64"
        },
        {
          "internalType": "uint40",
          "name": "validatorIndex",
          "type": "uint40"
        },
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "validatorFieldsProof",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "validatorBalanceProof",
              "type": "bytes"
            },
            {
              "internalType": "bytes32",
              "name": "balanceRoot",
              "type": "bytes32"
            }
          ],
          "internalType": "struct BeaconChainProofs.ValidatorFieldsAndBalanceProofs",
          "name": "proofs",
          "type": "tuple"
        },
        {
          "internalType": "bytes32[]",
          "name": "validatorFields",
          "type": "bytes32[]"
        }
      ],
      "name": "verifyWithdrawalCredentials",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8673d06e82287423bf2a2335a3bab56c11942b34cc150965d3f2d6736599dae9",
  "receipt": {
    "to": null,
    "from": "0xB7d2E57aE1a8eCc5f5487b010E1fCd60f4b84dC0",
    "contractAddress": "0x1dbbF25286e9bD42Bff4d4914c60B7559F8A7be8",
    "transactionIndex": 127,
    "gasUsed": "2044952",
    "logsBloom": "0x
    "blockHash": "0x65c4a8c1b124f8832a273703ff8382db773813e86b9737d151bd8e89d39f293b",
    "transactionHash": "0x8673d06e82287423bf2a2335a3bab56c11942b34cc150965d3f2d6736599dae9",
    "logs": [
      {
        "transactionIndex": 127,
        "blockNumber": 18722803,
        "transactionHash": "0x8673d06e82287423bf2a2335a3bab56c11942b34cc150965d3f2d6736599dae9",
        "address": "0x1dbbF25286e9bD42Bff4d4914c60B7559F8A7be8",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 256,
        "blockHash": "0x65c4a8c1b124f8832a273703ff8382db773813e86b9737d151bd8e89d39f293b"
      }
    ],
    "blockNumber": 18722803,
    "cumulativeGasUsed": "11090000",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e61991be36f3b065cf1f32b510d9735d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DelegateAddressAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotNativeEthRestakeAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOperatorDelegatorAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotRestakeManager\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegateAddress\",\"type\":\"address\"}],\"name\":\"DelegationAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"TokenStrategyUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatedTo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"WithdrawStarted\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IStrategy[]\",\"name\":\"strategies\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"}],\"internalType\":\"struct IStrategyManager.WithdrawerAndNonce\",\"name\":\"withdrawerAndNonce\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"withdrawalStartBlock\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"delegatedAddress\",\"type\":\"address\"}],\"internalType\":\"struct IStrategyManager.QueuedWithdrawal\",\"name\":\"_withdrawal\",\"type\":\"tuple\"},{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_middlewareTimesIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_sendToAddress\",\"type\":\"address\"}],\"name\":\"completeWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationManager\",\"outputs\":[{\"internalType\":\"contract IDelegationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eigenPod\",\"outputs\":[{\"internalType\":\"contract IEigenPod\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eigenPodManager\",\"outputs\":[{\"internalType\":\"contract IEigenPodManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedETHBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"getStrategyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenBalanceFromStrategy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"_roleManager\",\"type\":\"address\"},{\"internalType\":\"contract IStrategyManager\",\"name\":\"_strategyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_restakeManager\",\"type\":\"address\"},{\"internalType\":\"contract IDelegationManager\",\"name\":\"_delegationManager\",\"type\":\"address\"},{\"internalType\":\"contract IEigenPodManager\",\"name\":\"_eigenPodManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"restakeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegateAddress\",\"type\":\"address\"}],\"name\":\"setDelegateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract IStrategy\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"setTokenStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"depositDataRoot\",\"type\":\"bytes32\"}],\"name\":\"stakeEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakedButNotVerifiedEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"startWithdrawal\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyManager\",\"outputs\":[{\"internalType\":\"contract IStrategyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenStrategyMapping\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"oracleBlockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint40\",\"name\":\"validatorIndex\",\"type\":\"uint40\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"validatorFieldsProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"validatorBalanceProof\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"balanceRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct BeaconChainProofs.ValidatorFieldsAndBalanceProofs\",\"name\":\"proofs\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"validatorFields\",\"type\":\"bytes32[]\"}],\"name\":\"verifyWithdrawalCredentials\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract will be responsible for interacting with Eigenlayer Each of these contracts deployed will be delegated to one specific operator This contract can handle multiple ERC20 tokens, all of which will be delegated to the same operator Each supported ERC20 token will be pointed at a single Strategy contract in EL Only the RestakeManager should be interacting with this contract for EL interactions.\",\"errors\":{\"DelegateAddressAlreadySet()\":[{\"details\":\"Error when delegation address was already set - cannot be set again\"}],\"InvalidZeroInput()\":[{\"details\":\"Error for 0x0 address inputs\"}],\"NotFound()\":[{\"details\":\"Error for not found items in a list\"}],\"NotNativeEthRestakeAdmin()\":[{\"details\":\"Errror when caller does not have ETH Restake Admin role\"}],\"NotOperatorDelegatorAdmin()\":[{\"details\":\"Error when caller does not have OD admin role\"}],\"NotRestakeManager()\":[{\"details\":\"Error when caller is not RestakeManager contract\"}]},\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"completeWithdrawal((address[],uint256[],address,(address,uint96),uint32,address),address,uint256,address)\":{\"details\":\"Completes a withdrawal of a specific token from the EigenLayer. The tokens withdrawn will be sent directly to the specified address\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"details\":\"Prevents implementation contract from being initialized.\"},\"deposit(address,uint256)\":{\"details\":\"Deposit tokens into the EigenLayer.  This call assumes any balance of tokens in this contract will be delegated so do not directly send tokens here or they will be delegated and attributed to the next caller.\",\"returns\":{\"shares\":\"The amount of new shares in the `strategy` created as part of the action.\"}},\"getStakedETHBalance()\":{\"details\":\"Gets the amount of ETH staked in the EigenLayer\"},\"getStrategyIndex(address)\":{\"details\":\"Gets the index of the specific strategy in EigenLayer in the staker's strategy list\"},\"getTokenBalanceFromStrategy(address)\":{\"details\":\"Gets the underlying token amount from the amount of shares\"},\"initialize(address,address,address,address,address)\":{\"details\":\"Initializes the contract with initial vars\"},\"setDelegateAddress(address)\":{\"details\":\"Sets the address to delegate tokens to in EigenLayer -- THIS CAN ONLY BE SET ONCE\"},\"setTokenStrategy(address,address)\":{\"details\":\"Sets the strategy for a given token - setting strategy to 0x0 removes the ability to deposit and withdraw token\"},\"stakeEth(bytes,bytes,bytes32)\":{\"details\":\"Stake ETH in the EigenLayer Only the Restake Manager should call this function\"},\"startWithdrawal(address,uint256)\":{\"details\":\"Starts a withdrawal of a specific token from the EigenLayer.\",\"params\":{\"_token\":\"The token to withdraw from the EigenLayer.\",\"_tokenAmount\":\"The amount of tokens to withdraw.\"}},\"verifyWithdrawalCredentials(uint64,uint40,(bytes,bytes,bytes32),bytes32[])\":{\"details\":\"Verifies the withdrawal credentials for a withdrawal This will allow the EigenPodManager to verify the withdrawal credentials and credit the OD with shares Only the native eth restake admin should call this function\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Delegation/OperatorDelegator.sol\":\"OperatorDelegator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x0e1f0f5f62f67a881cd1a9597acbc0a5e4071f3c2c10449a183b922ae7272e3f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xd60f939a3ca0199014d079b4dd66aa757954334947d81eb5c1d35d7a83061ab3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20Upgradeable token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && AddressUpgradeable.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0x23b997be73d3dd46885262704f0f8cfc7273fdadfe303d37969a9561373972b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/Delegation/IOperatorDelegator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IStrategyManager.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IDelegationManager.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IEigenPod.sol\\\";\\n\\ninterface IOperatorDelegator {\\n    function getTokenBalanceFromStrategy(\\n        IERC20 token\\n    ) external view returns (uint256);\\n\\n    function deposit(IERC20 _token, uint256 _tokenAmount) external returns (uint256 shares);\\n\\n    function startWithdrawal(\\n        IERC20 _token,\\n        uint256 _tokenAmount\\n    ) external returns (bytes32);\\n\\n    function completeWithdrawal(\\n        IStrategyManager.QueuedWithdrawal calldata _withdrawal,\\n        IERC20 _token,\\n        uint256 _middlewareTimesIndex,\\n        address _sendToAddress\\n    ) external;\\n\\n    function getStakedETHBalance() external view returns (uint256);\\n\\n    function stakeEth(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\\n\\n    function eigenPod() external view returns (IEigenPod);\\n}\\n\\n\\n\",\"keccak256\":\"0xa0cc509f7c3bfcd6440b6d15f2e4017ef16ac40808f3511acb5f5ca7768fc19a\",\"license\":\"MIT\"},\"contracts/Delegation/OperatorDelegator.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"./OperatorDelegatorStorage.sol\\\";\\nimport \\\"../RestakeManager.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IDelegationManager.sol\\\";\\nimport \\\"../Errors/Errors.sol\\\";\\n\\n/// @dev This contract will be responsible for interacting with Eigenlayer\\n/// Each of these contracts deployed will be delegated to one specific operator\\n/// This contract can handle multiple ERC20 tokens, all of which will be delegated to the same operator\\n/// Each supported ERC20 token will be pointed at a single Strategy contract in EL\\n/// Only the RestakeManager should be interacting with this contract for EL interactions.\\ncontract OperatorDelegator is\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    OperatorDelegatorStorageV1\\n{\\n    using SafeERC20 for IERC20;\\n    \\n    uint256 internal constant GWEI_TO_WEI = 1e9;\\n\\n    event TokenStrategyUpdated(IERC20 token, IStrategy strategy);\\n    event DelegationAddressUpdated(address delegateAddress);\\n\\n    event WithdrawStarted(\\n        bytes32 withdrawRoot,\\n        address staker,\\n        address delegatedTo,\\n        address withdrawer,\\n        uint nonce,\\n        uint startBlock,\\n        IStrategy[] strategies,\\n        uint256[] shares\\n    );\\n\\n    /// @dev Allows only a whitelisted address to configure the contract\\n    modifier onlyOperatorDelegatorAdmin() {\\n        if(!roleManager.isOperatorDelegatorAdmin(msg.sender)) revert NotOperatorDelegatorAdmin();\\n        _;\\n    }\\n\\n    /// @dev Allows only the RestakeManager address to call functions\\n    modifier onlyRestakeManager() {\\n        if(msg.sender != restakeManager) revert NotRestakeManager();\\n        _;\\n    }\\n\\n    /// @dev Allows only a whitelisted address to configure the contract\\n    modifier onlyNativeEthRestakeAdmin() {\\n        if(!roleManager.isNativeEthRestakeAdmin(msg.sender)) revert NotNativeEthRestakeAdmin();\\n        _;\\n    }\\n\\n    /// @dev Prevents implementation contract from being initialized.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @dev Initializes the contract with initial vars\\n    function initialize(\\n        IRoleManager _roleManager,\\n        IStrategyManager _strategyManager,\\n        address _restakeManager,\\n        IDelegationManager _delegationManager,\\n        IEigenPodManager _eigenPodManager\\n    ) external initializer {\\n        if(address(_roleManager) == address(0x0)) revert InvalidZeroInput();\\n        if(address(_strategyManager) == address(0x0)) revert InvalidZeroInput();\\n        if(address(_restakeManager) == address(0x0)) revert InvalidZeroInput();\\n        if(address(_delegationManager) == address(0x0)) revert InvalidZeroInput();\\n        if(address(_eigenPodManager) == address(0x0)) revert InvalidZeroInput();\\n\\n        __ReentrancyGuard_init();\\n\\n        roleManager = _roleManager;\\n        strategyManager = _strategyManager;\\n        restakeManager = _restakeManager;\\n        delegationManager = _delegationManager;\\n        eigenPodManager = _eigenPodManager;\\n\\n        // Deploy new EigenPod\\n        eigenPodManager.createPod();\\n\\n        // Save off the EigenPod address\\n        eigenPod = IEigenPod(eigenPodManager.ownerToPod(address(this)));\\n    }\\n\\n    /// @dev Sets the strategy for a given token - setting strategy to 0x0 removes the ability to deposit and withdraw token\\n    function setTokenStrategy(\\n        IERC20 _token,\\n        IStrategy _strategy\\n    ) external nonReentrant onlyOperatorDelegatorAdmin {\\n        if(address(_token) == address(0x0)) revert InvalidZeroInput();\\n\\n        tokenStrategyMapping[_token] = _strategy;\\n        emit TokenStrategyUpdated(_token, _strategy);\\n    }\\n\\n    /// @dev Sets the address to delegate tokens to in EigenLayer -- THIS CAN ONLY BE SET ONCE\\n    function setDelegateAddress(\\n        address _delegateAddress\\n    ) external nonReentrant onlyOperatorDelegatorAdmin {\\n        if(address(_delegateAddress) == address(0x0)) revert InvalidZeroInput();\\n        if(address(delegateAddress) != address(0x0)) revert DelegateAddressAlreadySet();\\n\\n        delegateAddress = _delegateAddress;\\n\\n        delegationManager.delegateTo(\\n            delegateAddress\\n        );\\n\\n        emit DelegationAddressUpdated(_delegateAddress);\\n    }\\n\\n    /// @dev Deposit tokens into the EigenLayer.  This call assumes any balance of tokens in this contract will be delegated\\n    /// so do not directly send tokens here or they will be delegated and attributed to the next caller.\\n    /// @return shares The amount of new shares in the `strategy` created as part of the action.\\n    function deposit(\\n        IERC20 _token,\\n        uint256 _tokenAmount\\n    ) external nonReentrant onlyRestakeManager returns (uint256 shares) {\\n        if(address(tokenStrategyMapping[_token]) == address(0x0)) revert InvalidZeroInput();\\n        if(_tokenAmount == 0) revert InvalidZeroInput();\\n\\n        // Move the tokens into this contract\\n        _token.safeTransferFrom(msg.sender, address(this), _tokenAmount);\\n\\n        // Approve the strategy manager to spend the tokens\\n        _token.safeApprove(address(strategyManager), _tokenAmount);\\n\\n        // Deposit the tokens via the strategy manager\\n        return\\n            strategyManager.depositIntoStrategy(\\n                tokenStrategyMapping[_token],\\n                _token,\\n                _tokenAmount\\n            );\\n    }\\n\\n    /// @dev Gets the index of the specific strategy in EigenLayer in the staker's strategy list\\n    function getStrategyIndex(IStrategy _strategy) public view returns (uint256) {\\n        // Get the length of the strategy list for this contract\\n        uint256 strategyLength = strategyManager.stakerStrategyListLength(address(this));\\n\\n        for(uint256 i = 0; i < strategyLength; i++) {\\n            if(strategyManager.stakerStrategyList(address(this), i) == _strategy) {\\n                return i;\\n            }\\n        }\\n\\n        // Not found\\n        revert NotFound();\\n    }\\n\\n    /// @dev Starts a withdrawal of a specific token from the EigenLayer.\\n    /// @param _token The token to withdraw from the EigenLayer.\\n    /// @param _tokenAmount The amount of tokens to withdraw.\\n    function startWithdrawal(\\n        IERC20 _token,\\n        uint256 _tokenAmount\\n    ) external nonReentrant onlyRestakeManager returns (bytes32) {\\n        if(address(tokenStrategyMapping[_token]) == address(0x0)) revert InvalidZeroInput();\\n\\n        // Save the nonce before starting the withdrawal\\n        uint96 nonce = uint96(strategyManager.numWithdrawalsQueued(address(this)));\\n\\n        // Need to get the index for the strategy - this is not ideal since docs say only to put into list ones that we are withdrawing 100% from\\n        uint256[] memory strategyIndexes = new uint256[](1);\\n        strategyIndexes[0] = getStrategyIndex(tokenStrategyMapping[_token]);\\n\\n        // Convert the number of tokens to shares - TODO: Understand if the view function is the proper one to call\\n        uint256 sharesToWithdraw = tokenStrategyMapping[_token].underlyingToSharesView(_tokenAmount);\\n\\n        IStrategy[] memory strategiesToWithdraw = new IStrategy[](1);\\n        strategiesToWithdraw[0] = tokenStrategyMapping[_token];\\n\\n        uint256[] memory amountsToWithdraw = new uint256[](1);\\n        amountsToWithdraw[0] = sharesToWithdraw;\\n\\n        bytes32 withdrawalRoot = strategyManager.queueWithdrawal(\\n            strategyIndexes,\\n            strategiesToWithdraw,\\n            amountsToWithdraw,\\n            address(this), // Only allow this contract to complete the withdraw\\n            false // Do not undeledgate if the balance goes to 0\\n        );\\n\\n        // Emit the withdrawal started event\\n        emit WithdrawStarted(\\n            withdrawalRoot,\\n            address(this),\\n            delegateAddress,\\n            address(this),\\n            nonce,\\n            block.number,\\n            strategiesToWithdraw,\\n            amountsToWithdraw\\n        );\\n\\n        return withdrawalRoot;\\n    }\\n\\n    /// @dev Completes a withdrawal of a specific token from the EigenLayer.\\n    /// The tokens withdrawn will be sent directly to the specified address\\n    function completeWithdrawal(\\n        IStrategyManager.QueuedWithdrawal calldata _withdrawal,\\n        IERC20 _token,\\n        uint256 _middlewareTimesIndex,\\n        address _sendToAddress\\n    ) external nonReentrant onlyRestakeManager {\\n        IERC20[] memory tokens = new IERC20[](1);\\n        tokens[0] = _token;\\n\\n        strategyManager.completeQueuedWithdrawal(\\n            _withdrawal,\\n            tokens,\\n            _middlewareTimesIndex,\\n            true // Always get tokens and not share transfers\\n        );\\n\\n        // Send tokens to the specified address\\n        _token.safeTransfer(_sendToAddress, _token.balanceOf(address(this)));\\n    }\\n\\n    /// @dev Gets the underlying token amount from the amount of shares\\n    function getTokenBalanceFromStrategy(\\n        IERC20 token\\n    ) external view returns (uint256) {\\n        return tokenStrategyMapping[token].userUnderlyingView(address(this));\\n    }\\n\\n    /// @dev Gets the amount of ETH staked in the EigenLayer\\n    function getStakedETHBalance() external view returns (uint256) {\\n        // TODO: Once withdrawals are enabled, allow this to handle pending withdraws and a potential negative share balance in the EigenPodManager ownershares        \\n        // TODO: Once upgraded to M2, add back in staked verified ETH, e.g. + uint256(strategyManager.stakerStrategyShares(address(this), strategyManager.beaconChainETHStrategy()))\\n        return stakedButNotVerifiedEth + address(eigenPod).balance;\\n    }\\n\\n    /// @dev Stake ETH in the EigenLayer\\n    /// Only the Restake Manager should call this function\\n    function stakeEth(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable onlyRestakeManager {\\n        // Call the stake function in the EigenPodManager\\n        eigenPodManager.stake{value: msg.value}(pubkey, signature, depositDataRoot);\\n\\n        // Increment the staked but not verified ETH\\n        stakedButNotVerifiedEth += msg.value;\\n    }\\n\\n    /// @dev Verifies the withdrawal credentials for a withdrawal\\n    /// This will allow the EigenPodManager to verify the withdrawal credentials and credit the OD with shares\\n    /// Only the native eth restake admin should call this function\\n    function verifyWithdrawalCredentials(\\n        uint64 oracleBlockNumber,\\n        uint40 validatorIndex,\\n        BeaconChainProofs.ValidatorFieldsAndBalanceProofs memory proofs,\\n        bytes32[] calldata validatorFields\\n    ) external onlyNativeEthRestakeAdmin {\\n        eigenPod.verifyWithdrawalCredentialsAndBalance(\\n            oracleBlockNumber,\\n            validatorIndex,\\n            proofs,\\n            validatorFields\\n        );\\n\\n        // Decrement the staked but not verified ETH\\n        uint64 validatorCurrentBalanceGwei = BeaconChainProofs.getBalanceFromBalanceRoot(validatorIndex, proofs.balanceRoot);\\n        stakedButNotVerifiedEth -= (validatorCurrentBalanceGwei * GWEI_TO_WEI);\\n    }\\n}\\n\",\"keccak256\":\"0xea184c2cc666d829fb3ab656093ecbf314cf470b973e82418053c37f2ea382cf\",\"license\":\"BUSL-1.1\"},\"contracts/Delegation/OperatorDelegatorStorage.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IStrategy.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IStrategyManager.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IDelegationManager.sol\\\";\\nimport \\\"../EigenLayer/interfaces/IEigenPod.sol\\\";\\nimport \\\"./IOperatorDelegator.sol\\\";\\n\\n/// @title OperatorDelegatorStorage\\n/// @dev This contract will hold all local variables for the  Contract\\n/// When upgrading the protocol, inherit from this contract on the V2 version and change the\\n/// StorageManager to inherit from the later version.  This ensures there are no storage layout\\n/// corruptions when upgrading.\\nabstract contract OperatorDelegatorStorageV1 is IOperatorDelegator{\\n    /// @dev reference to the RoleManager contract\\n    IRoleManager public roleManager;\\n\\n    /// @dev The main strategy manager contract in EigenLayer\\n    IStrategyManager public strategyManager;\\n\\n    /// @dev the restake manager contract\\n    address public restakeManager;\\n\\n    /// @dev The mapping of supported token addresses to their respective strategy addresses\\n    /// This will control which tokens are supported by the protocol\\n    mapping(IERC20 => IStrategy) public tokenStrategyMapping;\\n\\n    /// @dev The address to delegate tokens to in EigenLayer\\n    address public delegateAddress;\\n\\n    /// @dev the delegation manager contract\\n    IDelegationManager public delegationManager;\\n\\n    /// @dev the EigenLayer EigenPodManager contract\\n    IEigenPodManager public eigenPodManager;\\n\\n    /// @dev The EigenPod owned by this contract\\n    IEigenPod public eigenPod;\\n\\n    /// @dev Tracks the balance that was staked to validators but hasn't been restaked to EL yet\\n    uint256 public stakedButNotVerifiedEth;\\n}\\n\\n/// On the next version of the protocol, if new variables are added, put them in the below\\n/// contract and use this as the inheritance chain.\\n// contract OperatorDelegatorStorageV2 is OperatorDelegatorStorageV1 {\\n// }\\n\",\"keccak256\":\"0x467f1a4dc78d817f905a0c60cc05f5bdd6292b24b177f584574a3bd981b9b301\",\"license\":\"MIT\"},\"contracts/Deposits/IDepositQueue.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IDepositQueue {\\n  function depositETHFromProtocol() external payable;\\n  function totalEarned(address tokenAddress) external view returns(uint256);\\n}\\n\",\"keccak256\":\"0x7d9244a4f2b664c885d29a078c848c72dc4f18e017367b647fc0947399a3dece\",\"license\":\"MIT\"},\"contracts/EigenLayer/interfaces/IBeaconChainOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.19;\\n\\n/**\\n * @title Interface for the BeaconStateOracle contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface IBeaconChainOracle {\\n    /// @notice Largest blockNumber that has been confirmed by the oracle.\\n    function latestConfirmedOracleBlockNumber() external view returns(uint64);\\n    /// @notice Mapping: Beacon Chain blockNumber => the Beacon Chain state root at the specified blockNumber.\\n    /// @dev This will return `bytes32(0)` if the state root at the specified blockNumber is not yet confirmed.\\n    function beaconStateRootAtBlockNumber(uint64 blockNumber) external view returns(bytes32);\\n\\n    /// @notice Mapping: address => whether or not the address is in the set of oracle signers.\\n    function isOracleSigner(address _oracleSigner) external view returns(bool);\\n\\n    /// @notice Mapping: Beacon Chain blockNumber => oracle signer address => whether or not the oracle signer has voted on the state root at the blockNumber.\\n    function hasVoted(uint64 blockNumber, address oracleSigner) external view returns(bool);\\n\\n    /// @notice Mapping: Beacon Chain blockNumber => state root => total number of oracle signer votes for the state root at the blockNumber. \\n    function stateRootVotes(uint64 blockNumber, bytes32 stateRoot) external view returns(uint256);\\n\\n    /// @notice Total number of members of the set of oracle signers.\\n    function totalOracleSigners() external view returns(uint256);\\n\\n    /**\\n     * @notice Number of oracle signers that must vote for a state root in order for the state root to be confirmed.\\n     * Adjustable by this contract's owner through use of the `setThreshold` function.\\n     * @dev We note that there is an edge case -- when the threshold is adjusted downward, if a state root already has enough votes to meet the *new* threshold,\\n     * the state root must still receive one additional vote from an oracle signer to be confirmed. This behavior is intended, to minimize unexpected root confirmations.\\n     */\\n    function threshold() external view returns(uint256);\\n\\n    /**\\n     * @notice Owner-only function used to modify the value of the `threshold` variable.\\n     * @param _threshold Desired new value for the `threshold` variable. Function will revert if this is set to zero.\\n     */\\n    function setThreshold(uint256 _threshold) external;\\n\\n    /**\\n     * @notice Owner-only function used to add a signer to the set of oracle signers.\\n     * @param _oracleSigners Array of address to be added to the set.\\n     * @dev Function will have no effect on the i-th input address if `_oracleSigners[i]`is already in the set of oracle signers.\\n     */\\n    function addOracleSigners(address[] memory _oracleSigners) external;\\n\\n    /**\\n     * @notice Owner-only function used to remove a signer from the set of oracle signers.\\n     * @param _oracleSigners Array of address to be removed from the set.\\n     * @dev Function will have no effect on the i-th input address if `_oracleSigners[i]`is already not in the set of oracle signers.\\n     */\\n    function removeOracleSigners(address[] memory _oracleSigners) external;\\n\\n    /**\\n     * @notice Called by a member of the set of oracle signers to assert that the Beacon Chain state root is `stateRoot` at `blockNumber`.\\n     * @dev The state root will be finalized once the total number of votes *for this exact state root at this exact blockNumber* meets the `threshold` value.\\n     * @param blockNumber The Beacon Chain blockNumber of interest.\\n     * @param stateRoot The Beacon Chain state root that the caller asserts was the correct root, at the specified `blockNumber`.\\n     */\\n    function voteForBeaconChainStateRoot(uint64 blockNumber, bytes32 stateRoot) external;\\n}\",\"keccak256\":\"0x9fb4c3a6a896b8d8f689a8d17007db7eac1fd053b13e8147ede9dacd0db1cb4c\",\"license\":\"BUSL-1.1\"},\"contracts/EigenLayer/interfaces/IDelegationManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.19;\\n\\nimport \\\"./IDelegationTerms.sol\\\";\\n\\n/**\\n * @title The interface for the primary delegation contract for EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice  This is the contract for delegation in EigenLayer. The main functionalities of this contract are\\n * - enabling anyone to register as an operator in EigenLayer\\n * - allowing new operators to provide a DelegationTerms-type contract, which may mediate their interactions with stakers who delegate to them\\n * - enabling any staker to delegate its stake to the operator of its choice\\n * - enabling a staker to undelegate its assets from an operator (performed as part of the withdrawal process, initiated through the StrategyManager)\\n */\\ninterface IDelegationManager {\\n\\n    /**\\n     * @notice This will be called by an operator to register itself as an operator that stakers can choose to delegate to.\\n     * @param dt is the `DelegationTerms` contract that the operator has for those who delegate to them.\\n     * @dev An operator can set `dt` equal to their own address (or another EOA address), in the event that they want to split payments\\n     * in a more 'trustful' manner.\\n     * @dev In the present design, once set, there is no way for an operator to ever modify the address of their DelegationTerms contract.\\n     */\\n    function registerAsOperator(IDelegationTerms dt) external;\\n\\n    /**\\n     *  @notice This will be called by a staker to delegate its assets to some operator.\\n     *  @param operator is the operator to whom staker (msg.sender) is delegating its assets\\n     */\\n    function delegateTo(address operator) external;\\n\\n    /**\\n     * @notice Delegates from `staker` to `operator`.\\n     * @dev requires that:\\n     * 1) if `staker` is an EOA, then `signature` is valid ECDSA signature from `staker`, indicating their intention for this action\\n     * 2) if `staker` is a contract, then `signature` must will be checked according to EIP-1271\\n     */\\n    function delegateToBySignature(address staker, address operator, uint256 expiry, bytes memory signature) external;\\n\\n    /**\\n     * @notice Undelegates `staker` from the operator who they are delegated to.\\n     * @notice Callable only by the StrategyManager\\n     * @dev Should only ever be called in the event that the `staker` has no active deposits in EigenLayer.\\n     */\\n    function undelegate(address staker) external;\\n\\n    /// @notice returns the address of the operator that `staker` is delegated to.\\n    function delegatedTo(address staker) external view returns (address);\\n\\n    /// @notice returns the DelegationTerms of the `operator`, which may mediate their interactions with stakers who delegate to them.\\n    function delegationTerms(address operator) external view returns (IDelegationTerms);\\n\\n    /// @notice returns the total number of shares in `strategy` that are delegated to `operator`.\\n    function operatorShares(address operator, IStrategy strategy) external view returns (uint256);\\n\\n    /**\\n     * @notice Increases the `staker`'s delegated shares in `strategy` by `shares, typically called when the staker has further deposits into EigenLayer\\n     * @dev Callable only by the StrategyManager\\n     */\\n    function increaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\\n\\n    /**\\n     * @notice Decreases the `staker`'s delegated shares in each entry of `strategies` by its respective `shares[i]`, typically called when the staker withdraws from EigenLayer\\n     * @dev Callable only by the StrategyManager\\n     */\\n    function decreaseDelegatedShares(\\n        address staker,\\n        IStrategy[] calldata strategies,\\n        uint256[] calldata shares\\n    ) external;\\n\\n    /// @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n    function isDelegated(address staker) external view returns (bool);\\n\\n    /// @notice Returns 'true' if `staker` is *not* actively delegated, and 'false' otherwise.\\n    function isNotDelegated(address staker) external view returns (bool);\\n\\n    /// @notice Returns if an operator can be delegated to, i.e. it has called `registerAsOperator`.\\n    function isOperator(address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x29503a298ee01fa549f3a0f7aadef804ab4d3bdaca06da68399c8264672cbb93\",\"license\":\"BUSL-1.1\"},\"contracts/EigenLayer/interfaces/IDelegationTerms.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.19;\\n\\nimport \\\"./IStrategy.sol\\\";\\n\\n/**\\n * @title Abstract interface for a contract that helps structure the delegation relationship.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice The gas budget provided to this contract in calls from EigenLayer contracts is limited.\\n */\\ninterface IDelegationTerms {\\n    function payForService(IERC20 token, uint256 amount) external payable;\\n\\n    function onDelegationWithdrawn(\\n        address delegator,\\n        IStrategy[] memory stakerStrategyList,\\n        uint256[] memory stakerShares\\n    ) external returns(bytes memory);\\n\\n    function onDelegationReceived(\\n        address delegator,\\n        IStrategy[] memory stakerStrategyList,\\n        uint256[] memory stakerShares\\n    ) external returns(bytes memory);\\n}\\n\",\"keccak256\":\"0x89c2cba89a7a7e5daf28580539549dba51731d91506ce60da46584cf96091bb4\",\"license\":\"BUSL-1.1\"},\"contracts/EigenLayer/interfaces/IEigenPod.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.19;\\n\\nimport \\\"../libraries/BeaconChainProofs.sol\\\";\\nimport \\\"./IEigenPodManager.sol\\\";\\nimport \\\"./IBeaconChainOracle.sol\\\";\\n\\n/**\\n * @title The implementation contract used for restaking beacon chain ETH on EigenLayer \\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice The main functionalities are:\\n * - creating new ETH validators with their withdrawal credentials pointed to this contract\\n * - proving from beacon chain state roots that withdrawal credentials are pointed to this contract\\n * - proving from beacon chain state roots the balances of ETH validators with their withdrawal credentials\\n *   pointed to this contract\\n * - updating aggregate balances in the EigenPodManager\\n * - withdrawing eth when withdrawals are initiated\\n * @dev Note that all beacon chain balances are stored as gwei within the beacon chain datastructures. We choose\\n *   to account balances in terms of gwei in the EigenPod contract and convert to wei when making calls to other contracts\\n */\\ninterface IEigenPod {\\n    enum VALIDATOR_STATUS {\\n        INACTIVE, // doesnt exist\\n        ACTIVE, // staked on ethpos and withdrawal credentials are pointed to the EigenPod\\n        OVERCOMMITTED, // proven to be overcommitted to EigenLayer\\n        WITHDRAWN // withdrawn from the Beacon Chain\\n    }\\n\\n    // this struct keeps track of PartialWithdrawalClaims\\n    struct PartialWithdrawalClaim {\\n        PARTIAL_WITHDRAWAL_CLAIM_STATUS status;\\n        // block at which the PartialWithdrawalClaim was created\\n        uint32 creationBlockNumber;\\n        // last block (inclusive) in which the PartialWithdrawalClaim can be fraudproofed\\n        uint32 fraudproofPeriodEndBlockNumber;\\n        // amount of ETH -- in Gwei -- to be withdrawn until completion of this claim\\n        uint64 partialWithdrawalAmountGwei;\\n    }\\n\\n    enum PARTIAL_WITHDRAWAL_CLAIM_STATUS {\\n        REDEEMED,\\n        PENDING,\\n        FAILED\\n    }\\n\\n    /// @notice The amount of eth, in gwei, that is restaked per validator\\n    function REQUIRED_BALANCE_GWEI() external view returns(uint64);\\n\\n    /// @notice The amount of eth, in wei, that is restaked per validator\\n    function REQUIRED_BALANCE_WEI() external view returns(uint256);\\n\\n    /// @notice this is a mapping of validator indices to a Validator struct containing pertinent info about the validator\\n    function validatorStatus(uint40 validatorIndex) external view returns(VALIDATOR_STATUS);\\n\\n    /// @notice the amount of execution layer ETH in this contract that is staked in EigenLayer (i.e. withdrawn from beaconchain but not EigenLayer), \\n    function restakedExecutionLayerGwei() external view returns(uint64);\\n\\n    /// @notice Used to initialize the pointers to contracts crucial to the pod's functionality, in beacon proxy construction from EigenPodManager\\n    function initialize(address owner) external;\\n\\n    /// @notice Called by EigenPodManager when the owner wants to create another ETH validator.\\n    function stake(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\\n\\n    /**\\n     * @notice Transfers `amountWei` in ether from this contract to the specified `recipient` address\\n     * @notice Called by EigenPodManager to withdrawBeaconChainETH that has been added to the EigenPod's balance due to a withdrawal from the beacon chain.\\n     * @dev Called during withdrawal or slashing.\\n     * @dev Note that this function is marked as non-reentrant to prevent the recipient calling back into it\\n     */\\n    function withdrawRestakedBeaconChainETH(address recipient, uint256 amount) external;\\n\\n    /// @notice The single EigenPodManager for EigenLayer\\n    function eigenPodManager() external view returns (IEigenPodManager);\\n\\n    /// @notice The owner of this EigenPod\\n    function podOwner() external view returns (address);\\n\\n    /// @notice an indicator of whether or not the podOwner has ever \\\"fully restaked\\\" by successfully calling `verifyCorrectWithdrawalCredentials`.\\n    function hasRestaked() external view returns (bool);\\n\\n    /// @notice block number of the most recent withdrawal\\n    function mostRecentWithdrawalBlockNumber() external view returns (uint64);\\n\\n\\n    ///@notice mapping that tracks proven partial withdrawals\\n    function provenPartialWithdrawal(uint40 validatorIndex, uint64 slot) external view returns (bool);\\n\\n    /**\\n     * @notice This function verifies that the withdrawal credentials of the podOwner are pointed to\\n     * this contract. It also verifies the current (not effective) balance  of the validator.  It verifies the provided proof of the ETH validator against the beacon chain state\\n     * root, marks the validator as 'active' in EigenLayer, and credits the restaked ETH in Eigenlayer.\\n     * @param oracleBlockNumber is the Beacon Chain blockNumber whose state root the `proof` will be proven against.\\n     * @param validatorIndex is the index of the validator being proven, refer to consensus specs \\n     * @param proofs is the bytes that prove the ETH validator's balance and withdrawal credentials against a beacon chain state root\\n     * @param validatorFields are the fields of the \\\"Validator Container\\\", refer to consensus specs \\n     * for details: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n     */\\n    function verifyWithdrawalCredentialsAndBalance(\\n        uint64 oracleBlockNumber,\\n        uint40 validatorIndex,\\n        BeaconChainProofs.ValidatorFieldsAndBalanceProofs memory proofs,\\n        bytes32[] calldata validatorFields\\n    ) external;\\n    \\n    /**\\n     * @notice This function records an overcommitment of stake to EigenLayer on behalf of a certain ETH validator.\\n     *         If successful, the overcommitted balance is penalized (available for withdrawal whenever the pod's balance allows).\\n     *         The ETH validator's shares in the enshrined beaconChainETH strategy are also removed from the StrategyManager and undelegated.\\n     * @param oracleBlockNumber The oracleBlockNumber whose state root the `proof` will be proven against.\\n     *        Must be within `VERIFY_OVERCOMMITTED_WINDOW_BLOCKS` of the current block.\\n     * @param validatorIndex is the index of the validator being proven, refer to consensus specs \\n     * @param proofs is the proof of the validator's balance and validatorFields in the balance tree and the balanceRoot to prove for\\n     * @param beaconChainETHStrategyIndex is the index of the beaconChainETHStrategy for the pod owner for the callback to \\n     *                                    the StrategyManager in case it must be removed from the list of the podOwners strategies\\n     * @param validatorFields are the fields of the \\\"Validator Container\\\", refer to consensus specs\\n     * @dev For more details on the Beacon Chain spec, see: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n     */\\n    function verifyOvercommittedStake(\\n        uint40 validatorIndex,\\n        BeaconChainProofs.ValidatorFieldsAndBalanceProofs calldata proofs,\\n        bytes32[] calldata validatorFields,\\n        uint256 beaconChainETHStrategyIndex,\\n        uint64 oracleBlockNumber\\n    ) external;\\n\\n    /**\\n     * @notice This function records a full withdrawal on behalf of one of the Ethereum validators for this EigenPod\\n     * @param withdrawalProofs is the information needed to check the veracity of the block number and withdrawal being proven\\n     * @param validatorFieldsProof is the proof of the validator's fields in the validator tree\\n     * @param withdrawalFields are the fields of the withdrawal being proven\\n     * @param validatorFields are the fields of the validator being proven\\n     * @param beaconChainETHStrategyIndex is the index of the beaconChainETHStrategy for the pod owner for the callback to \\n     *        the EigenPodManager to the StrategyManager in case it must be removed from the podOwner's list of strategies\\n     */\\n    function verifyAndProcessWithdrawal(\\n        BeaconChainProofs.WithdrawalProofs calldata withdrawalProofs, \\n        bytes calldata validatorFieldsProof,\\n        bytes32[] calldata validatorFields,\\n        bytes32[] calldata withdrawalFields,\\n        uint256 beaconChainETHStrategyIndex,\\n        uint64 oracleBlockNumber\\n    ) external;\\n\\n    /// @notice Called by the pod owner to withdraw the balance of the pod when `hasRestaked` is set to false\\n    function withdrawBeforeRestaking() external;\\n}\",\"keccak256\":\"0xd9e4b0049d1bcf5634f41a81920314f7a238473ebcccb492ae0af88e4cc584bf\",\"license\":\"BUSL-1.1\"},\"contracts/EigenLayer/interfaces/IEigenPodManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.19;\\n\\nimport \\\"./IStrategyManager.sol\\\";\\nimport \\\"./IEigenPod.sol\\\";\\nimport \\\"./IBeaconChainOracle.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\n\\n/**\\n * @title Interface for factory that creates and manages solo staking pods that have their withdrawal credentials pointed to EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\n\\ninterface IEigenPodManager is IPausable {\\n    /**\\n     * @notice Creates an EigenPod for the sender.\\n     * @dev Function will revert if the `msg.sender` already has an EigenPod.\\n     */\\n    function createPod() external;\\n\\n    /**\\n     * @notice Stakes for a new beacon chain validator on the sender's EigenPod. \\n     * Also creates an EigenPod for the sender if they don't have one already.\\n     * @param pubkey The 48 bytes public key of the beacon chain validator.\\n     * @param signature The validator's signature of the deposit data.\\n     * @param depositDataRoot The root/hash of the deposit data for the validator's deposit.\\n     */\\n    function stake(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\\n\\n    /**\\n     * @notice Deposits/Restakes beacon chain ETH in EigenLayer on behalf of the owner of an EigenPod.\\n     * @param podOwner The owner of the pod whose balance must be deposited.\\n     * @param amount The amount of ETH to 'deposit' (i.e. be credited to the podOwner).\\n     * @dev Callable only by the podOwner's EigenPod contract.\\n     */\\n    function restakeBeaconChainETH(address podOwner, uint256 amount) external;\\n\\n    /**\\n     * @notice Removes beacon chain ETH from EigenLayer on behalf of the owner of an EigenPod, when the\\n     *         balance of a validator is lower than how much stake they have committed to EigenLayer\\n     * @param podOwner The owner of the pod whose balance must be removed.\\n     * @param beaconChainETHStrategyIndex is the index of the beaconChainETHStrategy for the pod owner for the callback to \\n     *                                    the StrategyManager in case it must be removed from the list of the podOwner's strategies\\n     * @param amount The amount of ETH to remove.\\n     * @dev Callable only by the podOwner's EigenPod contract.\\n     */\\n    function recordOvercommittedBeaconChainETH(address podOwner, uint256 beaconChainETHStrategyIndex, uint256 amount) external;\\n    \\n    /**\\n     * @notice Withdraws ETH from an EigenPod. The ETH must have first been withdrawn from the beacon chain.\\n     * @param podOwner The owner of the pod whose balance must be withdrawn.\\n     * @param recipient The recipient of the withdrawn ETH.\\n     * @param amount The amount of ETH to withdraw.\\n     * @dev Callable only by the StrategyManager contract.\\n     */\\n    function withdrawRestakedBeaconChainETH(address podOwner, address recipient, uint256 amount) external;\\n\\n    /**\\n     * @notice Updates the oracle contract that provides the beacon chain state root\\n     * @param newBeaconChainOracle is the new oracle contract being pointed to\\n     * @dev Callable only by the owner of this contract (i.e. governance)\\n     */\\n    function updateBeaconChainOracle(IBeaconChainOracle newBeaconChainOracle) external;\\n\\n    /// @notice Returns the address of the `podOwner`'s EigenPod if it has been deployed.\\n    function ownerToPod(address podOwner) external view returns(IEigenPod);\\n\\n    /// @notice Returns the address of the `podOwner`'s EigenPod (whether it is deployed yet or not).\\n    function getPod(address podOwner) external view returns(IEigenPod);\\n\\n    /// @notice Oracle contract that provides updates to the beacon chain's state\\n    function beaconChainOracle() external view returns(IBeaconChainOracle);    \\n\\n    /// @notice Returns the Beacon Chain state root at `blockNumber`. Reverts if the Beacon Chain state root at `blockNumber` has not yet been finalized.\\n    function getBeaconChainStateRoot(uint64 blockNumber) external view returns(bytes32);\\n\\n    /// @notice EigenLayer's StrategyManager contract\\n    function strategyManager() external view returns(IStrategyManager);\\n\\n    /// @notice EigenLayer's Slasher contract\\n    function slasher() external view returns(ISlasher);\\n\\n    function hasPod(address podOwner) external view returns (bool);\\n}\",\"keccak256\":\"0xc4fb4f77dcc70d809323fb7398c3244846db6be70a139512e0c62c853e3749da\",\"license\":\"BUSL-1.1\"},\"contracts/EigenLayer/interfaces/IPausable.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.19;\\n\\nimport \\\"../interfaces/IPauserRegistry.sol\\\";\\n\\n/**\\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\\n * These functions should be permissioned as \\\"onlyPauser\\\" which defers to a `PauserRegistry` for determining access control.\\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \\\"paused\\\"), and if you unpause,\\n * you can only flip (any number of) switches to off/0 (aka \\\"paused\\\").\\n * If you want a pauseXYZ function that just flips a single bit / \\\"pausing flag\\\", it will:\\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\\n * 2) update the paused state to this new value\\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\\n */\\n\\ninterface IPausable {\\n    /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\\n    function pauserRegistry() external view returns (IPauserRegistry); \\n\\n    /**\\n     * @notice This function is used to pause an EigenLayer contract's functionality.\\n     * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n     * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\\n     */\\n    function pause(uint256 newPausedStatus) external;\\n\\n    /**\\n     * @notice Alias for `pause(type(uint256).max)`.\\n     */\\n    function pauseAll() external;\\n\\n    /**\\n     * @notice This function is used to unpause an EigenLayer contract's functionality.\\n     * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n     * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\\n     */\\n    function unpause(uint256 newPausedStatus) external;\\n\\n    /// @notice Returns the current paused status as a uint256.\\n    function paused() external view returns (uint256);\\n\\n    /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\\n    function paused(uint8 index) external view returns (bool);\\n\\n    /// @notice Allows the unpauser to set a new pauser registry\\n    function setPauserRegistry(IPauserRegistry newPauserRegistry) external;\\n}\\n\",\"keccak256\":\"0x94c8542e6578f9e9b416f4318af0e5cb2b7170e9f16c7f0ff1b20e0373cf48df\",\"license\":\"BUSL-1.1\"},\"contracts/EigenLayer/interfaces/IPauserRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.19;\\n\\n/**\\n * @title Interface for the `PauserRegistry` contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface IPauserRegistry {\\n    /// @notice Mapping of addresses to whether they hold the pauser role.\\n    function isPauser(address pauser) external view returns (bool);\\n\\n    /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\\n    function unpauser() external view returns (address);\\n}\\n\",\"keccak256\":\"0xb44bddd67fe8d1c1953c52ba8544df7fe7911ff7adc69322c070679a1df0df60\",\"license\":\"BUSL-1.1\"},\"contracts/EigenLayer/interfaces/ISlasher.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.19;\\n\\n/**\\n * @title Interface for the primary 'slashing' contract for EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice See the `Slasher` contract itself for implementation details.\\n */\\ninterface ISlasher {\\n    // struct used to store information about the current state of an operator's obligations to middlewares they are serving\\n    struct MiddlewareTimes {\\n        // The update block for the middleware whose most recent update was earliest, i.e. the 'stalest' update out of all middlewares the operator is serving\\n        uint32 stalestUpdateBlock;\\n        // The latest 'serveUntilBlock' from all of the middleware that the operator is serving\\n        uint32 latestServeUntilBlock;\\n    }\\n\\n    // struct used to store details relevant to a single middleware that an operator has opted-in to serving\\n    struct MiddlewareDetails {\\n        // the block before which the contract is allowed to slash the user\\n        uint32 contractCanSlashOperatorUntilBlock;\\n        // the block at which the middleware's view of the operator's stake was most recently updated\\n        uint32 latestUpdateBlock;\\n    }\\n\\n    /**\\n     * @notice Gives the `contractAddress` permission to slash the funds of the caller.\\n     * @dev Typically, this function must be called prior to registering for a middleware.\\n     */\\n    function optIntoSlashing(address contractAddress) external;\\n\\n    /**\\n     * @notice Used for 'slashing' a certain operator.\\n     * @param toBeFrozen The operator to be frozen.\\n     * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\\n     * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `optIntoSlashing`.\\n     */\\n    function freezeOperator(address toBeFrozen) external;\\n    \\n    /**\\n     * @notice Removes the 'frozen' status from each of the `frozenAddresses`\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function resetFrozenStatus(address[] calldata frozenAddresses) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during an operator's registration to make sure the operator's stake at registration \\n     *         is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\\n     * @dev adds the middleware's slashing contract to the operator's linked list\\n     */\\n    function recordFirstStakeUpdate(address operator, uint32 serveUntilBlock) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during a stake update for an operator (perhaps to free pending withdrawals)\\n     *         to make sure the operator's stake at updateBlock is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param updateBlock the block for which the stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at updateBlock is slashable\\n     * @param insertAfter the element of the operators linked list that the currently updating middleware should be inserted after\\n     * @dev insertAfter should be calculated offchain before making the transaction that calls this. this is subject to race conditions, \\n     *      but it is anticipated to be rare and not detrimental.\\n     */\\n    function recordStakeUpdate(address operator, uint32 updateBlock, uint32 serveUntilBlock, uint256 insertAfter) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during an operator's deregistration to make sure the operator's stake at deregistration \\n     *         is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\\n     * @dev removes the middleware's slashing contract to the operator's linked list and revokes the middleware's (i.e. caller's) ability to\\n     * slash `operator` once `serveUntil` is reached\\n     */\\n    function recordLastStakeUpdateAndRevokeSlashingAbility(address operator, uint32 serveUntilBlock) external;\\n\\n    /**\\n     * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\\n     * slashing of their funds, and cannot cannot deposit or withdraw from the strategyManager until the slashing process is completed\\n     * and the staker's status is reset (to 'unfrozen').\\n     * @param staker The staker of interest.\\n     * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\\n     * to an operator who has their status set to frozen. Otherwise returns 'false'.\\n     */\\n    function isFrozen(address staker) external view returns (bool);\\n\\n    /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\\n    function canSlash(address toBeSlashed, address slashingContract) external view returns (bool);\\n\\n    /// @notice Returns the block until which `serviceContract` is allowed to slash the `operator`.\\n    function contractCanSlashOperatorUntilBlock(address operator, address serviceContract) external view returns (uint32);\\n\\n    /// @notice Returns the block at which the `serviceContract` last updated its view of the `operator`'s stake\\n    function latestUpdateBlock(address operator, address serviceContract) external view returns (uint32);\\n\\n    /// @notice A search routine for finding the correct input value of `insertAfter` to `recordStakeUpdate` / `_updateMiddlewareList`.\\n    function getCorrectValueForInsertAfter(address operator, uint32 updateBlock) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 'true' if `operator` can currently complete a withdrawal started at the `withdrawalStartBlock`, with `middlewareTimesIndex` used\\n     * to specify the index of a `MiddlewareTimes` struct in the operator's list (i.e. an index in `operatorToMiddlewareTimes[operator]`). The specified\\n     * struct is consulted as proof of the `operator`'s ability (or lack thereof) to complete the withdrawal.\\n     * This function will return 'false' if the operator cannot currently complete a withdrawal started at the `withdrawalStartBlock`, *or* in the event\\n     * that an incorrect `middlewareTimesIndex` is supplied, even if one or more correct inputs exist.\\n     * @param operator Either the operator who queued the withdrawal themselves, or if the withdrawing party is a staker who delegated to an operator,\\n     * this address is the operator *who the staker was delegated to* at the time of the `withdrawalStartBlock`.\\n     * @param withdrawalStartBlock The block number at which the withdrawal was initiated.\\n     * @param middlewareTimesIndex Indicates an index in `operatorToMiddlewareTimes[operator]` to consult as proof of the `operator`'s ability to withdraw\\n     * @dev The correct `middlewareTimesIndex` input should be computable off-chain.\\n     */\\n    function canWithdraw(address operator, uint32 withdrawalStartBlock, uint256 middlewareTimesIndex) external returns(bool);\\n\\n    /**\\n     * operator => \\n     *  [\\n     *      (\\n     *          the least recent update block of all of the middlewares it's serving/served, \\n     *          latest time that the stake bonded at that update needed to serve until\\n     *      )\\n     *  ]\\n     */\\n    function operatorToMiddlewareTimes(address operator, uint256 arrayIndex) external view returns (MiddlewareTimes memory);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator].length`\\n    function middlewareTimesLength(address operator) external view returns (uint256);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].stalestUpdateBlock`.\\n    function getMiddlewareTimesIndexBlock(address operator, uint32 index) external view returns(uint32);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].latestServeUntil`.\\n    function getMiddlewareTimesIndexServeUntilBlock(address operator, uint32 index) external view returns(uint32);\\n\\n    /// @notice Getter function for fetching `_operatorToWhitelistedContractsByUpdate[operator].size`.\\n    function operatorWhitelistedContractsLinkedListSize(address operator) external view returns (uint256);\\n\\n    /// @notice Getter function for fetching a single node in the operator's linked list (`_operatorToWhitelistedContractsByUpdate[operator]`).\\n    function operatorWhitelistedContractsLinkedListEntry(address operator, address node) external view returns (bool, uint256, uint256);\\n}\\n\",\"keccak256\":\"0x4fd7a86894f0725a1576f9766fc5c6661628c56dd825ca5c6fc460e6aa5daccd\",\"license\":\"BUSL-1.1\"},\"contracts/EigenLayer/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Minimal interface for an `Strategy` contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice Custom `Strategy` implementations may expand extensively on this interface.\\n */\\ninterface IStrategy {\\n    /**\\n     * @notice Used to deposit tokens into this Strategy\\n     * @param token is the ERC20 token being deposited\\n     * @param amount is the amount of token being deposited\\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n     * `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\\n     * @return newShares is the number of new shares issued at the current exchange ratio.\\n     */\\n    function deposit(IERC20 token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Used to withdraw tokens from this Strategy, to the `depositor`'s address\\n     * @param depositor is the address to receive the withdrawn funds\\n     * @param token is the ERC20 token being transferred out\\n     * @param amountShares is the amount of shares being withdrawn\\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n     * other functions, and individual share balances are recorded in the strategyManager as well.\\n     */\\n    function withdraw(address depositor, IERC20 token, uint256 amountShares) external;\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function sharesToUnderlying(uint256 amountShares) external returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function underlyingToShares(uint256 amountUnderlying) external returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n     */\\n    function userUnderlying(address user) external returns (uint256);\\n\\n     /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @return The amount of shares corresponding to the input `amountUnderlying`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @return The amount of shares corresponding to the input `amountUnderlying`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\\n     */\\n    function userUnderlyingView(address user) external view returns (uint256);\\n\\n    /// @notice The underlying token for shares in this Strategy\\n    function underlyingToken() external view returns (IERC20);\\n\\n    /// @notice The total number of extant shares in this Strategy\\n    function totalShares() external view returns (uint256);\\n\\n    /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\\n    function explanation() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x30c13740e6ada90c5975c2120f319d7d71628d039bfc4cfe26fd65eb1d745d37\",\"license\":\"BUSL-1.1\"},\"contracts/EigenLayer/interfaces/IStrategyManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.19;\\n\\nimport \\\"./IStrategy.sol\\\";\\nimport \\\"./ISlasher.sol\\\";\\nimport \\\"./IDelegationManager.sol\\\";\\n\\n/**\\n * @title Interface for the primary entrypoint for funds into EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice See the `StrategyManager` contract itself for implementation details.\\n */\\ninterface IStrategyManager {\\n\\n    // Access to public vars - hack locally\\n    function stakerStrategyList(address staker, uint256 index) external view returns (IStrategy);\\n    function numWithdrawalsQueued(address staker) external view returns (uint256);\\n\\n    // packed struct for queued withdrawals; helps deal with stack-too-deep errors\\n    struct WithdrawerAndNonce {\\n        address withdrawer;\\n        uint96 nonce;\\n    }\\n\\n    /**\\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n     * In functions that operate on existing queued withdrawals -- e.g. `startQueuedWithdrawalWaitingPeriod` or `completeQueuedWithdrawal`,\\n     * the data is resubmitted and the hash of the submitted data is computed by `calculateWithdrawalRoot` and checked against the\\n     * stored hash in order to confirm the integrity of the submitted data.\\n     */\\n    struct QueuedWithdrawal {\\n        IStrategy[] strategies;\\n        uint256[] shares;\\n        address depositor;\\n        WithdrawerAndNonce withdrawerAndNonce;\\n        uint32 withdrawalStartBlock;\\n        address delegatedAddress;\\n    }\\n\\n    /**\\n     * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\\n     * @param strategy is the specified strategy where deposit is to be made,\\n     * @param token is the denomination in which the deposit is to be made,\\n     * @param amount is the amount of token to be deposited in the strategy by the depositor\\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n     * \\n     * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\\n     */\\n    function depositIntoStrategy(IStrategy strategy, IERC20 token, uint256 amount)\\n        external\\n        returns (uint256 shares);\\n\\n\\n    /**\\n     * @notice Deposits `amount` of beaconchain ETH into this contract on behalf of `staker`\\n     * @param staker is the entity that is restaking in eigenlayer,\\n     * @param amount is the amount of beaconchain ETH being restaked,\\n     * @dev Only callable by EigenPodManager.\\n     */\\n    function depositBeaconChainETH(address staker, uint256 amount) external;\\n\\n    /**\\n     * @notice Records an overcommitment event on behalf of a staker. The staker's beaconChainETH shares are decremented by `amount`.\\n     * @param overcommittedPodOwner is the pod owner to be slashed\\n     * @param beaconChainETHStrategyIndex is the index of the beaconChainETHStrategy in case it must be removed,\\n     * @param amount is the amount to decrement the slashedAddress's beaconChainETHStrategy shares\\n     * @dev Only callable by EigenPodManager.\\n     */\\n    function recordOvercommittedBeaconChainETH(address overcommittedPodOwner, uint256 beaconChainETHStrategyIndex, uint256 amount)\\n        external;\\n\\n    /**\\n     * @notice Used for depositing an asset into the specified strategy with the resultant shares credited to `staker`,\\n     * who must sign off on the action.\\n     * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed \\n     * purely to help one address deposit 'for' another.\\n     * @param strategy is the specified strategy where deposit is to be made,\\n     * @param token is the denomination in which the deposit is to be made,\\n     * @param amount is the amount of token to be deposited in the strategy by the depositor\\n     * @param staker the staker that the deposited assets will be credited to\\n     * @param expiry the timestamp at which the signature expires\\n     * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\\n     * following EIP-1271 if the `staker` is a contract\\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\\n     * targeting stakers who may be attempting to undelegate.\\n     * @dev Cannot be called on behalf of a staker that is 'frozen' (this function will revert if the `staker` is frozen).\\n     * \\n     *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy\\n     */\\n    function depositIntoStrategyWithSignature(\\n        IStrategy strategy,\\n        IERC20 token,\\n        uint256 amount,\\n        address staker,\\n        uint256 expiry,\\n        bytes memory signature\\n    )\\n        external\\n        returns (uint256 shares);\\n\\n    /// @notice Returns the current shares of `user` in `strategy`\\n    function stakerStrategyShares(address user, IStrategy strategy) external view returns (uint256 shares);\\n\\n    /**\\n     * @notice Get all details on the depositor's deposits and corresponding shares\\n     * @return (depositor's strategies, shares in these strategies)\\n     */\\n    function getDeposits(address depositor) external view returns (IStrategy[] memory, uint256[] memory);\\n\\n    /// @notice Simple getter function that returns `stakerStrategyList[staker].length`.\\n    function stakerStrategyListLength(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Called by a staker to queue a withdrawal of the given amount of `shares` from each of the respective given `strategies`.\\n     * @dev Stakers will complete their withdrawal by calling the 'completeQueuedWithdrawal' function.\\n     * User shares are decreased in this function, but the total number of shares in each strategy remains the same.\\n     * The total number of shares is decremented in the 'completeQueuedWithdrawal' function instead, which is where\\n     * the funds are actually sent to the user through use of the strategies' 'withdrawal' function. This ensures\\n     * that the value per share reported by each strategy will remain consistent, and that the shares will continue\\n     * to accrue gains during the enforced withdrawal waiting period.\\n     * @param strategyIndexes is a list of the indices in `stakerStrategyList[msg.sender]` that correspond to the strategies\\n     * for which `msg.sender` is withdrawing 100% of their shares\\n     * @param strategies The Strategies to withdraw from\\n     * @param shares The amount of shares to withdraw from each of the respective Strategies in the `strategies` array\\n     * @param withdrawer The address that can complete the withdrawal and will receive any withdrawn funds or shares upon completing the withdrawal\\n     * @param undelegateIfPossible If this param is marked as 'true' *and the withdrawal will result in `msg.sender` having no shares in any Strategy,*\\n     * then this function will also make an internal call to `undelegate(msg.sender)` to undelegate the `msg.sender`.\\n     * @return The 'withdrawalRoot' of the newly created Queued Withdrawal\\n     * @dev Strategies are removed from `stakerStrategyList` by swapping the last entry with the entry to be removed, then\\n     * popping off the last entry in `stakerStrategyList`. The simplest way to calculate the correct `strategyIndexes` to input\\n     * is to order the strategies *for which `msg.sender` is withdrawing 100% of their shares* from highest index in\\n     * `stakerStrategyList` to lowest index\\n     * @dev Note that if the withdrawal includes shares in the enshrined 'beaconChainETH' strategy, then it must *only* include shares in this strategy, and\\n     * `withdrawer` must match the caller's address. The first condition is because slashing of queued withdrawals cannot be guaranteed \\n     * for Beacon Chain ETH (since we cannot trigger a withdrawal from the beacon chain through a smart contract) and the second condition is because shares in\\n     * the enshrined 'beaconChainETH' strategy technically represent non-fungible positions (deposits to the Beacon Chain, each pointed at a specific EigenPod).\\n     */\\n    function queueWithdrawal(\\n        uint256[] calldata strategyIndexes,\\n        IStrategy[] calldata strategies,\\n        uint256[] calldata shares,\\n        address withdrawer,\\n        bool undelegateIfPossible\\n    )\\n        external returns(bytes32);\\n        \\n    /**\\n     * @notice Used to complete the specified `queuedWithdrawal`. The function caller must match `queuedWithdrawal.withdrawer`\\n     * @param queuedWithdrawal The QueuedWithdrawal to complete.\\n     * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `strategies` array\\n     * of the `queuedWithdrawal`. This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\\n     * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\\n     * @param receiveAsTokens If true, the shares specified in the queued withdrawal will be withdrawn from the specified strategies themselves\\n     * and sent to the caller, through calls to `queuedWithdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\\n     * will simply be transferred to the caller directly.\\n     * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\\n     */\\n    function completeQueuedWithdrawal(\\n        QueuedWithdrawal calldata queuedWithdrawal,\\n        IERC20[] calldata tokens,\\n        uint256 middlewareTimesIndex,\\n        bool receiveAsTokens\\n    )\\n        external;\\n    \\n    /**\\n     * @notice Used to complete the specified `queuedWithdrawals`. The function caller must match `queuedWithdrawals[...].withdrawer`\\n     * @param queuedWithdrawals The QueuedWithdrawals to complete.\\n     * @param tokens Array of tokens for each QueuedWithdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\\n     * @param middlewareTimesIndexes One index to reference per QueuedWithdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\\n     * @param receiveAsTokens If true, the shares specified in the queued withdrawal will be withdrawn from the specified strategies themselves\\n     * and sent to the caller, through calls to `queuedWithdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\\n     * will simply be transferred to the caller directly.\\n     * @dev Array-ified version of `completeQueuedWithdrawal`\\n     * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\\n     */\\n    function completeQueuedWithdrawals(\\n        QueuedWithdrawal[] calldata queuedWithdrawals,\\n        IERC20[][] calldata tokens,\\n        uint256[] calldata middlewareTimesIndexes,\\n        bool[] calldata receiveAsTokens\\n    )\\n        external;\\n\\n    /**\\n     * @notice Slashes the shares of a 'frozen' operator (or a staker delegated to one)\\n     * @param slashedAddress is the frozen address that is having its shares slashed\\n     * @param recipient is the address that will receive the slashed funds, which could e.g. be a harmed party themself,\\n     * or a MerkleDistributor-type contract that further sub-divides the slashed funds.\\n     * @param strategies Strategies to slash\\n     * @param shareAmounts The amount of shares to slash in each of the provided `strategies`\\n     * @param tokens The tokens to use as input to the `withdraw` function of each of the provided `strategies`\\n     * @param strategyIndexes is a list of the indices in `stakerStrategyList[msg.sender]` that correspond to the strategies\\n     * for which `msg.sender` is withdrawing 100% of their shares\\n     * @param recipient The slashed funds are withdrawn as tokens to this address.\\n     * @dev strategies are removed from `stakerStrategyList` by swapping the last entry with the entry to be removed, then\\n     * popping off the last entry in `stakerStrategyList`. The simplest way to calculate the correct `strategyIndexes` to input\\n     * is to order the strategies *for which `msg.sender` is withdrawing 100% of their shares* from highest index in\\n     * `stakerStrategyList` to lowest index\\n     */\\n    function slashShares(\\n        address slashedAddress,\\n        address recipient,\\n        IStrategy[] calldata strategies,\\n        IERC20[] calldata tokens,\\n        uint256[] calldata strategyIndexes,\\n        uint256[] calldata shareAmounts\\n    )\\n        external;\\n\\n    /**\\n     * @notice Slashes an existing queued withdrawal that was created by a 'frozen' operator (or a staker delegated to one)\\n     * @param recipient The funds in the slashed withdrawal are withdrawn as tokens to this address.\\n     * @param queuedWithdrawal The previously queued withdrawal to be slashed\\n     * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `strategies`\\n     * array of the `queuedWithdrawal`.\\n     * @param indicesToSkip Optional input parameter -- indices in the `strategies` array to skip (i.e. not call the 'withdraw' function on). This input exists\\n     * so that, e.g., if the slashed QueuedWithdrawal contains a malicious strategy in the `strategies` array which always reverts on calls to its 'withdraw' function,\\n     * then the malicious strategy can be skipped (with the shares in effect \\\"burned\\\"), while the non-malicious strategies are still called as normal.\\n     */\\n    function slashQueuedWithdrawal(address recipient, QueuedWithdrawal calldata queuedWithdrawal, IERC20[] calldata tokens, uint256[] calldata indicesToSkip)\\n        external;\\n\\n    /// @notice Returns the keccak256 hash of `queuedWithdrawal`.\\n    function calculateWithdrawalRoot(\\n        QueuedWithdrawal memory queuedWithdrawal\\n    )\\n        external\\n        pure\\n        returns (bytes32);\\n\\n    /**\\n     * @notice Owner-only function that adds the provided Strategies to the 'whitelist' of strategies that stakers can deposit into\\n     * @param strategiesToWhitelist Strategies that will be added to the `strategyIsWhitelistedForDeposit` mapping (if they aren't in it already)\\n    */\\n    function addStrategiesToDepositWhitelist(IStrategy[] calldata strategiesToWhitelist) external;\\n\\n    /**\\n     * @notice Owner-only function that removes the provided Strategies from the 'whitelist' of strategies that stakers can deposit into\\n     * @param strategiesToRemoveFromWhitelist Strategies that will be removed to the `strategyIsWhitelistedForDeposit` mapping (if they are in it)\\n    */\\n    function removeStrategiesFromDepositWhitelist(IStrategy[] calldata strategiesToRemoveFromWhitelist) external;\\n\\n    /// @notice Returns the single, central Delegation contract of EigenLayer\\n    function delegation() external view returns (IDelegationManager);\\n\\n    /// @notice Returns the single, central Slasher contract of EigenLayer\\n    function slasher() external view returns (ISlasher);\\n\\n    /// @notice returns the enshrined, virtual 'beaconChainETH' Strategy\\n    function beaconChainETHStrategy() external view returns (IStrategy);\\n\\n    /// @notice Returns the number of blocks that must pass between the time a withdrawal is queued and the time it can be completed\\n    function withdrawalDelayBlocks() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x932109cb42c3ddf185e19600574dc07aef02c152bc36f921545716d415e44d55\",\"license\":\"BUSL-1.1\"},\"contracts/EigenLayer/libraries/BeaconChainProofs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity =0.8.19;\\n\\nimport \\\"./Merkle.sol\\\";\\nimport \\\"../libraries/Endian.sol\\\";\\n\\n//Utility library for parsing and PHASE0 beacon chain block headers\\n//SSZ Spec: https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\\n//BeaconBlockHeader Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader\\n//BeaconState Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconstate\\nlibrary BeaconChainProofs {\\n    // constants are the number of fields and the heights of the different merkle trees used in merkleizing beacon chain containers\\n    uint256 internal constant NUM_BEACON_BLOCK_HEADER_FIELDS = 5;\\n    uint256 internal constant BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT = 3;\\n\\n    uint256 internal constant NUM_BEACON_BLOCK_BODY_FIELDS = 11;\\n    uint256 internal constant BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT = 4;\\n\\n    uint256 internal constant NUM_BEACON_STATE_FIELDS = 21;\\n    uint256 internal constant BEACON_STATE_FIELD_TREE_HEIGHT = 5;\\n\\n    uint256 internal constant NUM_ETH1_DATA_FIELDS = 3;\\n    uint256 internal constant ETH1_DATA_FIELD_TREE_HEIGHT = 2;\\n\\n    uint256 internal constant NUM_VALIDATOR_FIELDS = 8;\\n    uint256 internal constant VALIDATOR_FIELD_TREE_HEIGHT = 3;\\n\\n    uint256 internal constant NUM_EXECUTION_PAYLOAD_HEADER_FIELDS = 15;\\n    uint256 internal constant EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT = 4;\\n\\n\\n    uint256 internal constant NUM_EXECUTION_PAYLOAD_FIELDS = 15;\\n    uint256 internal constant EXECUTION_PAYLOAD_FIELD_TREE_HEIGHT = 4;\\n\\n\\n    // HISTORICAL_ROOTS_LIMIT\\t = 2**24, so tree height is 24\\n    uint256 internal constant HISTORICAL_ROOTS_TREE_HEIGHT = 24;\\n\\n    // HISTORICAL_BATCH is root of state_roots and block_root, so number of leaves =  2^1\\n    uint256 internal constant HISTORICAL_BATCH_TREE_HEIGHT = 1;\\n\\n    // SLOTS_PER_HISTORICAL_ROOT = 2**13, so tree height is 13\\n    uint256 internal constant STATE_ROOTS_TREE_HEIGHT = 13;\\n    uint256 internal constant BLOCK_ROOTS_TREE_HEIGHT = 13;\\n\\n\\n    uint256 internal constant NUM_WITHDRAWAL_FIELDS = 4;\\n    // tree height for hash tree of an individual withdrawal container\\n    uint256 internal constant WITHDRAWAL_FIELD_TREE_HEIGHT = 2;\\n\\n    uint256 internal constant VALIDATOR_TREE_HEIGHT = 40;\\n    //refer to the eigenlayer-cli proof library.  Despite being the same dimensions as the validator tree, the balance tree is merkleized differently\\n    uint256 internal constant BALANCE_TREE_HEIGHT = 38;\\n\\n    // MAX_WITHDRAWALS_PER_PAYLOAD = 2**4, making tree height = 4\\n    uint256 internal constant WITHDRAWALS_TREE_HEIGHT = 4;\\n\\n    //in beacon block body\\n    uint256 internal constant EXECUTION_PAYLOAD_INDEX = 9;\\n\\n    // in beacon block header\\n    uint256 internal constant STATE_ROOT_INDEX = 3;\\n    uint256 internal constant PROPOSER_INDEX_INDEX = 1;\\n    uint256 internal constant SLOT_INDEX = 0;\\n    uint256 internal constant BODY_ROOT_INDEX = 4;\\n    // in beacon state\\n    uint256 internal constant STATE_ROOTS_INDEX = 6;\\n    uint256 internal constant BLOCK_ROOTS_INDEX = 5;\\n    uint256 internal constant HISTORICAL_ROOTS_INDEX = 7;\\n    uint256 internal constant ETH_1_ROOT_INDEX = 8;\\n    uint256 internal constant VALIDATOR_TREE_ROOT_INDEX = 11;\\n    uint256 internal constant BALANCE_INDEX = 12;\\n    uint256 internal constant EXECUTION_PAYLOAD_HEADER_INDEX = 24;\\n    uint256 internal constant HISTORICAL_BATCH_STATE_ROOT_INDEX = 1;\\n\\n    // in validator\\n    uint256 internal constant VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX = 1;\\n    uint256 internal constant VALIDATOR_BALANCE_INDEX = 2;\\n    uint256 internal constant VALIDATOR_SLASHED_INDEX = 3;\\n    uint256 internal constant VALIDATOR_WITHDRAWABLE_EPOCH_INDEX = 7;\\n    \\n    // in execution payload header\\n    uint256 internal constant BLOCK_NUMBER_INDEX = 6;\\n    uint256 internal constant WITHDRAWALS_ROOT_INDEX = 14;\\n\\n    //in execution payload\\n    uint256 internal constant WITHDRAWALS_INDEX = 14;\\n\\n    // in withdrawal\\n    uint256 internal constant WITHDRAWAL_VALIDATOR_INDEX_INDEX = 1;\\n    uint256 internal constant WITHDRAWAL_VALIDATOR_AMOUNT_INDEX = 3;\\n\\n    //In historicalBatch\\n    uint256 internal constant HISTORICALBATCH_STATEROOTS_INDEX = 1;\\n\\n    //Misc Constants\\n    uint256 internal constant SLOTS_PER_EPOCH = 32;\\n\\n    bytes8 internal constant UINT64_MASK = 0xffffffffffffffff;\\n\\n\\n\\n    struct WithdrawalProofs {\\n        bytes blockHeaderProof;\\n        bytes withdrawalProof;\\n        bytes slotProof;\\n        bytes executionPayloadProof;\\n        bytes blockNumberProof;\\n        uint64 blockHeaderRootIndex;\\n        uint64 withdrawalIndex;\\n        bytes32 blockHeaderRoot;\\n        bytes32 blockBodyRoot;\\n        bytes32 slotRoot;\\n        bytes32 blockNumberRoot;\\n        bytes32 executionPayloadRoot;\\n    }\\n\\n    struct ValidatorFieldsAndBalanceProofs {\\n        bytes validatorFieldsProof;\\n        bytes validatorBalanceProof;\\n        bytes32 balanceRoot;\\n    }\\n\\n    struct ValidatorFieldsProof {\\n        bytes validatorProof;\\n        uint40 validatorIndex;\\n    }\\n\\n    /**\\n     * \\n     * @notice This function is parses the balanceRoot to get the uint64 balance of a validator.  During merkleization of the\\n     * beacon state balance tree, four uint64 values (making 32 bytes) are grouped together and treated as a single leaf in the merkle tree. Thus the\\n     * validatorIndex mod 4 is used to determine which of the four uint64 values to extract from the balanceRoot.\\n     * @param validatorIndex is the index of the validator being proven for.\\n     * @param balanceRoot is the combination of 4 validator balances being proven for.\\n     * @return The validator's balance, in Gwei\\n     */\\n   function getBalanceFromBalanceRoot(uint40 validatorIndex, bytes32 balanceRoot) internal pure returns (uint64) {\\n        uint256 bitShiftAmount = (validatorIndex % 4) * 64;\\n        bytes32 validatorBalanceLittleEndian = bytes32((uint256(balanceRoot) << bitShiftAmount));\\n        uint64 validatorBalance = Endian.fromLittleEndianUint64(validatorBalanceLittleEndian);\\n        return validatorBalance;\\n    }\\n\\n    /**\\n     * @notice This function verifies merkle proofs of the fields of a certain validator against a beacon chain state root\\n     * @param validatorIndex the index of the proven validator\\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\\n     * @param proof is the data used in proving the validator's fields\\n     * @param validatorFields the claimed fields of the validator\\n     */\\n    function verifyValidatorFields(\\n        uint40 validatorIndex,\\n        bytes32 beaconStateRoot,\\n        bytes calldata proof, \\n        bytes32[] calldata validatorFields\\n    ) internal view {\\n        \\n        require(validatorFields.length == 2**VALIDATOR_FIELD_TREE_HEIGHT, \\\"BeaconChainProofs.verifyValidatorFields: Validator fields has incorrect length\\\");\\n\\n        /**\\n         * Note: the length of the validator merkle proof is BeaconChainProofs.VALIDATOR_TREE_HEIGHT + 1.\\n         * There is an additional layer added by hashing the root with the length of the validator list\\n         */\\n        require(proof.length == 32 * ((VALIDATOR_TREE_HEIGHT + 1) + BEACON_STATE_FIELD_TREE_HEIGHT), \\\"BeaconChainProofs.verifyValidatorFields: Proof has incorrect length\\\");\\n        uint256 index = (VALIDATOR_TREE_ROOT_INDEX << (VALIDATOR_TREE_HEIGHT + 1)) | uint256(validatorIndex);\\n        // merkleize the validatorFields to get the leaf to prove\\n        bytes32 validatorRoot = Merkle.merkleizeSha256(validatorFields);\\n\\n        // verify the proof of the validatorRoot against the beaconStateRoot\\n        require(Merkle.verifyInclusionSha256(proof, beaconStateRoot, validatorRoot, index), \\\"BeaconChainProofs.verifyValidatorFields: Invalid merkle proof\\\");\\n    }\\n\\n    /**\\n     * @notice This function verifies merkle proofs of the balance of a certain validator against a beacon chain state root\\n     * @param validatorIndex the index of the proven validator\\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\\n     * @param proof is the proof of the balance against the beacon chain state root\\n     * @param balanceRoot is the serialized balance used to prove the balance of the validator (refer to `getBalanceFromBalanceRoot` above for detailed explanation)\\n     */\\n    function verifyValidatorBalance(\\n        uint40 validatorIndex,\\n        bytes32 beaconStateRoot,\\n        bytes calldata proof,\\n        bytes32 balanceRoot\\n    ) internal view {\\n        require(proof.length == 32 * ((BALANCE_TREE_HEIGHT + 1) + BEACON_STATE_FIELD_TREE_HEIGHT), \\\"BeaconChainProofs.verifyValidatorBalance: Proof has incorrect length\\\");\\n\\n        /**\\n        * the beacon state's balance list is a list of uint64 values, and these are grouped together in 4s when merkleized.  \\n        * Therefore, the index of the balance of a validator is validatorIndex/4\\n        */\\n        uint256 balanceIndex = uint256(validatorIndex/4);\\n        balanceIndex = (BALANCE_INDEX << (BALANCE_TREE_HEIGHT + 1)) | balanceIndex;\\n\\n        require(Merkle.verifyInclusionSha256(proof, beaconStateRoot, balanceRoot, balanceIndex), \\\"BeaconChainProofs.verifyValidatorBalance: Invalid merkle proof\\\");\\n    }\\n\\n    /**\\n     * @notice This function verifies the slot and the withdrawal fields for a given withdrawal\\n     * @param beaconStateRoot is the beacon chain state root to be proven against.\\n     * @param proofs is the provided set of merkle proofs\\n     * @param withdrawalFields is the serialized withdrawal container to be proven\\n     */\\n    function verifyWithdrawalProofs(\\n        bytes32 beaconStateRoot,\\n        WithdrawalProofs calldata proofs,\\n        bytes32[] calldata withdrawalFields\\n    ) internal view {\\n        require(withdrawalFields.length == 2**WITHDRAWAL_FIELD_TREE_HEIGHT, \\\"BeaconChainProofs.verifyWithdrawalProofs: withdrawalFields has incorrect length\\\");\\n\\n        require(proofs.blockHeaderRootIndex < 2**BLOCK_ROOTS_TREE_HEIGHT, \\\"BeaconChainProofs.verifyWithdrawalProofs: blockRootIndex is too large\\\");\\n        require(proofs.withdrawalIndex < 2**WITHDRAWALS_TREE_HEIGHT, \\\"BeaconChainProofs.verifyWithdrawalProofs: withdrawalIndex is too large\\\");\\n       \\n        // verify the block header proof length\\n        require(proofs.blockHeaderProof.length == 32 * (BEACON_STATE_FIELD_TREE_HEIGHT + BLOCK_ROOTS_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawalProofs: blockHeaderProof has incorrect length\\\");\\n        require(proofs.withdrawalProof.length == 32 * (EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT + WITHDRAWALS_TREE_HEIGHT + 1),\\n            \\\"BeaconChainProofs.verifyWithdrawalProofs: withdrawalProof has incorrect length\\\");\\n        require(proofs.executionPayloadProof.length == 32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT + BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawalProofs: executionPayloadProof has incorrect length\\\");\\n        require(proofs.slotProof.length == 32 * (BEACON_BLOCK_HEADER_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawalProofs: slotProof has incorrect length\\\");\\n        require(proofs.blockNumberProof.length == 32 * (EXECUTION_PAYLOAD_HEADER_FIELD_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyWithdrawalProofs: blockNumberProof has incorrect length\\\");\\n\\n\\n        /**\\n         * Computes the block_header_index relative to the beaconStateRoot.  It concatenates the indexes of all the\\n         * intermediate root indexes from the bottom of the sub trees (the block header container) to the top of the tree\\n         */\\n        uint256 blockHeaderIndex = BLOCK_ROOTS_INDEX << (BLOCK_ROOTS_TREE_HEIGHT)  | uint256(proofs.blockHeaderRootIndex);\\n        // Verify the blockHeaderRoot against the beaconStateRoot\\n        require(Merkle.verifyInclusionSha256(proofs.blockHeaderProof, beaconStateRoot, proofs.blockHeaderRoot, blockHeaderIndex),\\n            \\\"BeaconChainProofs.verifyWithdrawalProofs: Invalid block header merkle proof\\\");\\n\\n        //Next we verify the slot against the blockHeaderRoot\\n        require(Merkle.verifyInclusionSha256(proofs.slotProof, proofs.blockHeaderRoot, proofs.slotRoot, SLOT_INDEX), \\\"BeaconChainProofs.verifyWithdrawalProofs: Invalid slot merkle proof\\\");\\n\\n        // Next we verify the executionPayloadRoot against the blockHeaderRoot\\n        uint256 executionPayloadIndex = BODY_ROOT_INDEX << (BEACON_BLOCK_BODY_FIELD_TREE_HEIGHT)| EXECUTION_PAYLOAD_INDEX ;\\n        require(Merkle.verifyInclusionSha256(proofs.executionPayloadProof, proofs.blockHeaderRoot, proofs.executionPayloadRoot, executionPayloadIndex),\\n            \\\"BeaconChainProofs.verifyWithdrawalProofs: Invalid executionPayload merkle proof\\\");\\n\\n        // Next we verify the blockNumberRoot against the executionPayload root\\n        require(Merkle.verifyInclusionSha256(proofs.blockNumberProof, proofs.executionPayloadRoot, proofs.blockNumberRoot, BLOCK_NUMBER_INDEX),\\n            \\\"BeaconChainProofs.verifyWithdrawalProofs: Invalid blockNumber merkle proof\\\");\\n\\n        /**\\n         * Next we verify the withdrawal fields against the blockHeaderRoot:\\n         * First we compute the withdrawal_index relative to the blockHeaderRoot by concatenating the indexes of all the \\n         * intermediate root indexes from the bottom of the sub trees (the withdrawal container) to the top, the blockHeaderRoot.\\n         * Then we calculate merkleize the withdrawalFields container to calculate the the withdrawalRoot.\\n         * Finally we verify the withdrawalRoot against the executionPayloadRoot.\\n         */\\n        uint256 withdrawalIndex = WITHDRAWALS_INDEX << (WITHDRAWALS_TREE_HEIGHT + 1) | uint256(proofs.withdrawalIndex);\\n        bytes32 withdrawalRoot = Merkle.merkleizeSha256(withdrawalFields);\\n        require(Merkle.verifyInclusionSha256(proofs.withdrawalProof, proofs.executionPayloadRoot, withdrawalRoot, withdrawalIndex),\\n            \\\"BeaconChainProofs.verifyWithdrawalProofs: Invalid withdrawal merkle proof\\\");\\n    }\\n\\n}\",\"keccak256\":\"0x243f2e741e0d3220eef0da9c5a125de86120aa03de40faeeea001f7307699738\",\"license\":\"BUSL-1.1\"},\"contracts/EigenLayer/libraries/Endian.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity =0.8.19;\\n\\nlibrary Endian {\\n    /**\\n     * @notice Converts a little endian-formatted uint64 to a big endian-formatted uint64\\n     * @param lenum little endian-formatted uint64 input, provided as 'bytes32' type\\n     * @return n The big endian-formatted uint64\\n     * @dev Note that the input is formatted as a 'bytes32' type (i.e. 256 bits), but it is immediately truncated to a uint64 (i.e. 64 bits)\\n     * through a right-shift/shr operation.\\n     */\\n    function fromLittleEndianUint64(\\n        bytes32 lenum\\n    ) internal pure returns (uint64 n) {\\n        // the number needs to be stored in little-endian encoding (ie in bytes 0-8)\\n        n = uint64(uint256(lenum >> 192));\\n        return\\n            (n >> 56) |\\n            ((0x00FF000000000000 & n) >> 40) |\\n            ((0x0000FF0000000000 & n) >> 24) |\\n            ((0x000000FF00000000 & n) >> 8) |\\n            ((0x00000000FF000000 & n) << 8) |\\n            ((0x0000000000FF0000 & n) << 24) |\\n            ((0x000000000000FF00 & n) << 40) |\\n            ((0x00000000000000FF & n) << 56);\\n    }\\n}\\n\",\"keccak256\":\"0x8506587ff542d5268f778251827bc46c6ce4ca16ec6fe8cfb8a912e6c5079777\",\"license\":\"BUSL-1.1\"},\"contracts/EigenLayer/libraries/Merkle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity =0.8.19;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary Merkle {\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is \\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     * \\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function verifyInclusionKeccak(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal pure returns (bool) {\\n        return processInclusionProofKeccak(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is \\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     * \\n     * _Available since v4.4._\\n     * \\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function processInclusionProofKeccak(bytes memory proof, bytes32 leaf, uint256 index) internal pure returns (bytes32) {\\n        require(proof.length != 0 && proof.length % 32 == 0, \\\"Merkle.processInclusionProofKeccak: proof length should be a non-zero multiple of 32\\\");\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i+=32) {\\n            if(index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                assembly {\\n                    mstore(0x00, computedHash)\\n                    mstore(0x20, mload(add(proof, i)))\\n                    computedHash := keccak256(0x00, 0x40)\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, computedHash)\\n                    computedHash := keccak256(0x00, 0x40)\\n                    index := div(index, 2)\\n                }            \\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is \\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     * \\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function verifyInclusionSha256(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bool) {\\n        return processInclusionProofSha256(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is \\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     * \\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function processInclusionProofSha256(bytes memory proof, bytes32 leaf, uint256 index) internal view returns (bytes32) {\\n        require(proof.length != 0 && proof.length % 32 == 0, \\\"Merkle.processInclusionProofSha256: proof length should be a non-zero multiple of 32\\\");\\n        bytes32[1] memory computedHash = [leaf];\\n        for (uint256 i = 32; i <= proof.length; i+=32) {\\n            if(index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                assembly {\\n                    mstore(0x00, mload(computedHash))\\n                    mstore(0x20, mload(add(proof, i)))\\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) {revert(0, 0)}\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, mload(computedHash))\\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) {revert(0, 0)}\\n                    index := div(index, 2)\\n                }            \\n            }\\n        }\\n        return computedHash[0];\\n    }\\n\\n    /**\\n     @notice this function returns the merkle root of a tree created from a set of leaves using sha256 as its hash function\\n     @param leaves the leaves of the merkle tree\\n     @return The computed Merkle root of the tree.\\n     @dev A pre-condition to this function is that leaves.length is a power of two.  If not, the function will merkleize the inputs incorrectly.\\n     */ \\n    function merkleizeSha256(\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32) {\\n        //there are half as many nodes in the layer above the leaves\\n        uint256 numNodesInLayer = leaves.length / 2;\\n        //create a layer to store the internal nodes\\n        bytes32[] memory layer = new bytes32[](numNodesInLayer);\\n        //fill the layer with the pairwise hashes of the leaves\\n        for (uint i = 0; i < numNodesInLayer; i++) {\\n            layer[i] = sha256(abi.encodePacked(leaves[2*i], leaves[2*i+1]));\\n        }\\n        //the next layer above has half as many nodes\\n        numNodesInLayer /= 2;\\n        //while we haven't computed the root\\n        while (numNodesInLayer != 0) {\\n            //overwrite the first numNodesInLayer nodes in layer with the pairwise hashes of their children\\n            for (uint i = 0; i < numNodesInLayer; i++) {\\n                layer[i] = sha256(abi.encodePacked(layer[2*i], layer[2*i+1]));\\n            }\\n            //the next layer above has half as many nodes\\n            numNodesInLayer /= 2;\\n        }\\n        //the first node in the layer is the root\\n        return layer[0];\\n    }\\n}\",\"keccak256\":\"0x9a42b0ea6c6662ef2818c90314aebc100861b00eff6985453483e8447f229bb1\",\"license\":\"BUSL-1.1\"},\"contracts/Errors/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/// @dev Error for 0x0 address inputs\\nerror InvalidZeroInput();    \\n\\n/// @dev Error for already added items to a list\\nerror AlreadyAdded();    \\n\\n/// @dev Error for not found items in a list\\nerror NotFound();    \\n\\n/// @dev Error for hitting max TVL\\nerror MaxTVLReached();\\n\\n/// @dev Error for caller not having permissions\\nerror NotRestakeManagerAdmin();\\n\\n/// @dev Error for call not coming from deposit queue contract\\nerror NotDepositQueue();\\n\\n/// @dev Error for contract being paused\\nerror ContractPaused(); \\n\\n/// @dev Error for exceeding max basis points (100%)\\nerror OverMaxBasisPoints();\\n\\n/// @dev Error for invalid token decimals for collateral tokens (must be 18)\\nerror InvalidTokenDecimals(uint8 expected, uint8 actual);\\n\\n/// @dev Error when withdraw is already completed\\nerror WithdrawAlreadyCompleted();\\n\\n/// @dev Error when a different address tries to complete withdraw\\nerror NotOriginalWithdrawCaller(address expectedCaller);\\n\\n/// @dev Error when caller does not have OD admin role\\nerror NotOperatorDelegatorAdmin();\\n\\n/// @dev Error when caller does not have Oracle Admin role\\nerror NotOracleAdmin();\\n\\n/// @dev Error when caller is not RestakeManager contract\\nerror NotRestakeManager();\\n\\n/// @dev Errror when caller does not have ETH Restake Admin role\\nerror NotNativeEthRestakeAdmin();\\n\\n/// @dev Error when delegation address was already set - cannot be set again\\nerror DelegateAddressAlreadySet();\\n\\n/// @dev Error when caller does not have ERC20 Rewards Admin role\\nerror NotERC20RewardsAdmin();\\n\\n/// @dev Error when ending ETH fails\\nerror TransferFailed();\\n\\n/// @dev Error when caller does not have ETH Minter Burner Admin role\\nerror NotEzETHMinterBurner();\\n\\n/// @dev Error when caller does not have Token Admin role\\nerror NotTokenAdmin();\\n\\n/// @dev Error when price oracle is not configured\\nerror OracleNotFound();\\n\\n/// @dev Error when price oracle data is stale\\nerror OraclePriceExpired();\\n\\n/// @dev Error when array lengths do not match\\nerror MismatchedArrayLengths();\\n\\n/// @dev Error when caller does not have Deposit Withdraw Pauser role\\nerror NotDepositWithdrawPauser();\",\"keccak256\":\"0xcd647192cd7b75f8c5bbe0025961be050bac77adea8dee8ebd20f9cbf09d4e70\",\"license\":\"BUSL-1.1\"},\"contracts/IRestakeManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./Delegation/IOperatorDelegator.sol\\\";\\n\\ninterface IRestakeManager {\\n  function stakeEthInOperatorDelegator(IOperatorDelegator operatorDelegator, bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\\n  function depositTokenRewardsFromProtocol(\\n        IERC20 _token,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0ebee451828d7e9d92f22fd2b35742df9da62ddf4bf806c11942390434db78d4\",\"license\":\"MIT\"},\"contracts/Oracle/IRenzoOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRenzoOracle {        \\n    function lookupTokenValue(IERC20 _token, uint256 _balance) external view returns (uint256);\\n    function lookupTokenAmountFromValue(IERC20 _token, uint256 _value) external view returns (uint256);\\n    function lookupTokenValues(IERC20[] memory _tokens, uint256[] memory _balances) external view returns (uint256);\\n    function calculateMintAmount(uint256 _currentValueInProtocol, uint256 _newValueAdded, uint256 _existingEzETHSupply) external pure returns (uint256);\\n    function calculateRedeemAmount(uint256 _ezETHBeingBurned, uint256 _existingEzETHSupply, uint256 _currentValueInProtocol) external pure returns (uint256) ;\\n}\",\"keccak256\":\"0x6015e00565df1fdba43b8d5cf4763903063e1f56584d96992d88f7264c6b488a\",\"license\":\"MIT\"},\"contracts/Permissions/IRoleManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IRoleManager {\\n    /// @dev Determines if the specified address has permissions to manage RoleManager\\n    /// @param potentialAddress Address to check\\n    function isRoleManagerAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to mint or burn ezETH tokens\\n    /// @param potentialAddress Address to check\\n    function isEzETHMinterBurner(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update config on the OperatorDelgator Contracts\\n    /// @param potentialAddress Address to check\\n    function isOperatorDelegatorAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update config on the Oracle Contract config\\n    /// @param potentialAddress Address to check\\n    function isOracleAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update config on the Restake Manager\\n    /// @param potentialAddress Address to check\\n    function isRestakeManagerAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update config on the Token Contract\\n    /// @param potentialAddress Address to check\\n    function isTokenAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n    \\n    /// @dev Determines if the specified address has permission to trigger restaking of native ETH\\n    /// @param potentialAddress Address to check\\n    function isNativeEthRestakeAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);        \\n\\n    /// @dev Determines if the specified address has permission to sweep and deposit ERC20 Rewards\\n    /// @param potentialAddress Address to check\\n    function isERC20RewardsAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);        \\n    \\n    /// @dev Determines if the specified address has permission to pause deposits and withdraws\\n    /// @param potentialAddress Address to check\\n    function isDepositWithdrawPauser(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xd2d340f92680be754fcf310ac593a07f8f0dc45db056caf7398e9791d95e8d43\",\"license\":\"MIT\"},\"contracts/RestakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./RestakeManagerStorage.sol\\\";\\nimport \\\"./EigenLayer/interfaces/IStrategy.sol\\\";\\nimport \\\"./EigenLayer/interfaces/IStrategyManager.sol\\\";\\nimport \\\"./EigenLayer/interfaces/IDelegationManager.sol\\\";\\nimport \\\"./token/IEzEthToken.sol\\\";\\nimport \\\"./IRestakeManager.sol\\\";\\nimport \\\"./Errors/Errors.sol\\\";\\n\\n/**\\n * @author  Renzo\\n * @title   RestakeManager\\n * @dev     This contract is the main entrypoint for external users into the protocol\\n            Users will interact with this contract to deposit and withdraw value into and from EigenLayer\\n            Ownership of deposited funds will be tracked via the ezETh token\\n */\\ncontract RestakeManager is\\n    IRestakeManager,\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    RestakeManagerStorageV1\\n{\\n    using SafeERC20 for IERC20;\\n    using SafeERC20Upgradeable for IEzEthToken;\\n\\n    event OperatorDelegatorAdded(IOperatorDelegator od);\\n    event OperatorDelegatorRemoved(IOperatorDelegator od);\\n    event OperatorDelegatorAllocationUpdated(IOperatorDelegator od, uint256 allocation);\\n\\n    event CollateralTokenAdded(IERC20 token);\\n    event CollateralTokenRemoved(IERC20 token);    \\n\\n    /// @dev Basis points used for percentages (100 basis points equals 1%)\\n    uint256 constant BASIS_POINTS = 100;\\n\\n    /// @dev Event emitted when a new deposit occurs\\n    event Deposit(\\n        address depositor,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 ezETHMinted\\n    );\\n\\n    /// @dev Event emitted when a new withdraw is started\\n    event UserWithdrawStarted(\\n        bytes32 withdrawalRoot,\\n        address withdrawer,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 ezETHToBurn\\n    );\\n\\n    /// @dev Event emitted when a new withdraw is completed\\n    event UserWithdrawCompleted(\\n        bytes32 withdrawalRoot,\\n        address withdrawer,\\n        IERC20 token,\\n        uint256 amount,\\n        uint256 ezETHBurned\\n    );\\n\\n    /// @dev Allows only a whitelisted address to configure the contract\\n    modifier onlyRestakeManagerAdmin() {\\n        if(!roleManager.isRestakeManagerAdmin(msg.sender)) revert NotRestakeManagerAdmin();\\n        _;\\n    }\\n\\n    /// @dev Allows only a whitelisted address to set pause state\\n    modifier onlyDepositWithdrawPauserAdmin() {\\n        if(!roleManager.isDepositWithdrawPauser(msg.sender)) revert NotDepositWithdrawPauser();\\n        _;\\n    }\\n\\n    /// @dev Allows only the deposit queue to call functions\\n    modifier onlyDepositQueue() {\\n        if(msg.sender != address(depositQueue)) revert NotDepositQueue();\\n        _;\\n    }\\n\\n    /// @dev Only allows execution if contract is not paused\\n    modifier notPaused() {\\n        if(paused) revert ContractPaused();\\n        _;\\n    }\\n\\n    /// @dev Prevents implementation contract from being initialized.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @dev Initializes the contract with initial vars\\n    function initialize(\\n        IRoleManager _roleManager,\\n        IEzEthToken _ezETH,\\n        IRenzoOracle _renzoOracle,\\n        IStrategyManager _strategyManager,\\n        IDelegationManager _delegationManager,\\n        IDepositQueue _depositQueue\\n    ) public initializer {\\n\\n        __ReentrancyGuard_init();\\n        \\n        roleManager = _roleManager;\\n        ezETH = _ezETH;\\n        renzoOracle = _renzoOracle;\\n        strategyManager = _strategyManager;\\n        delegationManager = _delegationManager;\\n        depositQueue = _depositQueue;\\n        paused = false;\\n    }\\n\\n    /// @dev Allows a restake manager admin to set the paused state of the contract\\n    function setPaused(bool _paused) external onlyDepositWithdrawPauserAdmin {\\n        paused = _paused;\\n    }\\n\\n    /// @dev Get the length of the operator delegators array\\n    function getOperatorDelegatorsLength() external view returns (uint256) {\\n        return operatorDelegators.length;\\n    }\\n\\n    /// @dev Allows a restake manager admin to add an OperatorDelegator to the list\\n    function addOperatorDelegator(\\n        IOperatorDelegator _newOperatorDelegator,\\n        uint256 _allocationBasisPoints\\n    ) external onlyRestakeManagerAdmin {\\n        // Ensure it is not already in the list\\n        uint256 odLength = operatorDelegators.length;\\n        for (uint256 i = 0; i < odLength;) {\\n            if( address(operatorDelegators[i]) == address(_newOperatorDelegator)) revert AlreadyAdded();\\n            unchecked{++i;}        \\n        }\\n\\n        // Verify a valid allocation\\n        if(_allocationBasisPoints > (100 * BASIS_POINTS)) revert OverMaxBasisPoints();\\n\\n        // Add it to the list\\n        operatorDelegators.push(_newOperatorDelegator);\\n\\n        emit OperatorDelegatorAdded(_newOperatorDelegator);\\n\\n        // Set the allocation\\n        operatorDelegatorAllocations[\\n            _newOperatorDelegator\\n        ] = _allocationBasisPoints;\\n\\n        emit OperatorDelegatorAllocationUpdated(\\n            _newOperatorDelegator,\\n            _allocationBasisPoints\\n        );\\n    }\\n\\n    /// @dev Allows a restake manager admin to remove an OperatorDelegator from the list\\n    function removeOperatorDelegator(\\n        IOperatorDelegator _operatorDelegatorToRemove\\n    ) external onlyRestakeManagerAdmin {\\n        // Remove it from the list\\n        uint256 odLength = operatorDelegators.length;\\n        for (uint256 i = 0; i < odLength;) {\\n            if (\\n                address(operatorDelegators[i]) ==\\n                address(_operatorDelegatorToRemove)\\n            ) {\\n                // Clear the allocation\\n                operatorDelegatorAllocations[_operatorDelegatorToRemove] = 0;\\n                emit OperatorDelegatorAllocationUpdated(\\n                    _operatorDelegatorToRemove,\\n                    0\\n                );\\n\\n                // Remove from list\\n                operatorDelegators[i] = operatorDelegators[\\n                    operatorDelegators.length - 1\\n                ];\\n                operatorDelegators.pop();\\n                emit OperatorDelegatorRemoved(_operatorDelegatorToRemove);\\n                return;\\n            }\\n            unchecked{++i;}\\n        }\\n\\n        // If the item was not found, throw an error\\n        revert NotFound();\\n    }\\n\\n    /// @dev Allows restake manager admin to set an OperatorDelegator allocation\\n    function setOperatorDelegatorAllocation(\\n        IOperatorDelegator _operatorDelegator,\\n        uint256 _allocationBasisPoints\\n    ) external onlyRestakeManagerAdmin {\\n        if(address(_operatorDelegator) == address(0x0)) revert InvalidZeroInput();\\n        if(_allocationBasisPoints > (100 * BASIS_POINTS)) revert OverMaxBasisPoints();\\n\\n        // Ensure the OD is in the list to prevent mis-configuration\\n        bool foundOd = false;\\n        uint256 odLength = operatorDelegators.length;\\n        for (uint256 i = 0; i < odLength;) {\\n            if (\\n                address(operatorDelegators[i]) ==\\n                address(_operatorDelegator)\\n            ) {\\n                foundOd = true;\\n                break;\\n            }\\n            unchecked{++i;}\\n        }\\n        if(!foundOd) revert NotFound();\\n\\n\\n        // Set the allocation\\n        operatorDelegatorAllocations[\\n            _operatorDelegator\\n        ] = _allocationBasisPoints;\\n\\n        emit OperatorDelegatorAllocationUpdated(\\n            _operatorDelegator,\\n            _allocationBasisPoints\\n        );\\n    }\\n\\n    /// @dev Allows a restake manager admin to set the max TVL for deposits.  If set to 0, no deposits will be enforced.\\n    function setMaxDepositTVL(uint256 _maxDepositTVL) external onlyRestakeManagerAdmin {\\n        maxDepositTVL = _maxDepositTVL;\\n    }\\n\\n    /// @dev Allows restake manager to add a collateral token\\n    function addCollateralToken(\\n        IERC20 _newCollateralToken\\n    ) external onlyRestakeManagerAdmin {\\n        // Ensure it is not already in the list\\n        uint256 tokenLength = collateralTokens.length;\\n        for (uint256 i = 0; i < tokenLength;) {\\n            if( address(collateralTokens[i]) == address(_newCollateralToken)) revert AlreadyAdded();\\n            unchecked{++i;}\\n        }\\n\\n        // Verify the token has 18 decimal precision - pricing calculations will be off otherwise\\n        if(IERC20Metadata(address(_newCollateralToken)).decimals() != 18) revert InvalidTokenDecimals(18, IERC20Metadata(address(_newCollateralToken)).decimals());\\n\\n        // Add it to the list\\n        collateralTokens.push(_newCollateralToken);\\n\\n        emit CollateralTokenAdded(_newCollateralToken);\\n    }\\n\\n    /// @dev Allows restake manager to remove a collateral token\\n    function removeCollateralToken(\\n        IERC20 _collateralTokenToRemove\\n    ) external onlyRestakeManagerAdmin {\\n        // Remove it from the list\\n        uint256 tokenLength = collateralTokens.length;\\n        for (uint256 i = 0; i < tokenLength;) {\\n            if (\\n                address(collateralTokens[i]) ==\\n                address(_collateralTokenToRemove)\\n            ) {\\n                collateralTokens[i] = collateralTokens[\\n                    collateralTokens.length - 1\\n                ];\\n                collateralTokens.pop();\\n                emit CollateralTokenRemoved(_collateralTokenToRemove);\\n                return;\\n            }\\n            unchecked{++i;}\\n        }\\n\\n        // If the item was not found, throw an error\\n        revert NotFound();\\n    }\\n\\n    /// @dev Get the length of the collateral tokens array\\n    function getCollateralTokensLength() external view returns (uint256) {\\n        return collateralTokens.length;\\n    }\\n\\n    /// @dev This function calculates the TVLs for each operator delegator by individual token, total for each OD, and total for the protocol.\\n    /// @return operatorDelegatorTokenTVLs Each OD's TVL indexed by operatorDelegators array by collateralTokens array\\n    /// @return operatorDelegatorTVLs Each OD's Total TVL in order of operatorDelegators array\\n    /// @return totalTVL The total TVL across all operator delegators.\\n    function calculateTVLs()\\n        public\\n        view\\n        returns (uint256[][] memory, uint256[] memory, uint256)\\n    {\\n        uint256[][] memory operatorDelegatorTokenTVLs = new uint256[][](\\n            operatorDelegators.length\\n        );\\n        uint256[] memory operatorDelegatorTVLs = new uint256[](\\n            operatorDelegators.length\\n        );\\n        uint256 totalTVL = 0;\\n\\n        // Iterate through the ODs\\n        uint256 odLength = operatorDelegators.length;\\n        for (uint256 i = 0; i < odLength;) {\\n            // Track the TVL for this OD\\n            uint256 operatorTVL = 0;\\n\\n            // Track the individual token TVLs for this OD - native ETH will be last item in the array\\n            uint256[] memory operatorValues = new uint256[](\\n                collateralTokens.length + 1\\n            );\\n            operatorDelegatorTokenTVLs[i] = operatorValues;\\n\\n            // Iterate through the tokens and get the value of each\\n            uint256 tokenLength = collateralTokens.length;\\n            for (uint256 j = 0; j < tokenLength;) {\\n                // Get the value of this token\\n                uint256 operatorBalance = operatorDelegators[i]\\n                    .getTokenBalanceFromStrategy(collateralTokens[j]);\\n\\n                // Set the value in the array for this OD\\n                operatorValues[j] = renzoOracle.lookupTokenValue(\\n                    collateralTokens[j],\\n                    operatorBalance\\n                );\\n\\n                // Add it to the total TVL for this OD\\n                operatorTVL += operatorValues[j];\\n\\n                unchecked{++j;}\\n            }\\n\\n            // Get the value of native ETH staked for the OD\\n            uint256 operatorEthBalance = operatorDelegators[i].getStakedETHBalance();\\n\\n            // Save it to the array for the OD\\n            operatorValues[operatorValues.length - 1] = operatorEthBalance;\\n\\n            // Add it to the total TVL for this OD\\n            operatorTVL += operatorEthBalance;\\n\\n            // Add it to the total TVL for the protocol\\n            totalTVL += operatorTVL;\\n\\n            // Save the TVL for this OD\\n            operatorDelegatorTVLs[i] = operatorTVL;\\n\\n            unchecked{++i;}\\n        }\\n\\n        // Get the value of native ETH held in the deposit queue and add it to the total TVL\\n        totalTVL += address(depositQueue).balance;\\n\\n        return (operatorDelegatorTokenTVLs, operatorDelegatorTVLs, totalTVL);\\n    }\\n\\n    /// @dev Picks the OperatorDelegator with the TVL below the threshold or returns the first one in the list\\n    /// @return The OperatorDelegator to use\\n    function chooseOperatorDelegatorForDeposit(\\n        uint256[] memory tvls,\\n        uint256 totalTVL\\n    ) public view returns (IOperatorDelegator) {\\n        // Ensure OperatorDelegator list is not empty\\n        if (operatorDelegators.length == 0) revert NotFound();\\n\\n        // If there is only one operator delegator, return it\\n        if (operatorDelegators.length == 1) {\\n            return operatorDelegators[0];\\n        }\\n\\n        // Otherwise, find the operator delegator with TVL below the threshold\\n        uint256 tvlLength = tvls.length;\\n        for (uint256 i = 0; i < tvlLength;) {\\n            if (\\n                tvls[i] <\\n                (operatorDelegatorAllocations[operatorDelegators[i]] *\\n                    totalTVL) /\\n                    BASIS_POINTS /\\n                    BASIS_POINTS\\n            ) {\\n                return operatorDelegators[i];\\n            }\\n\\n            unchecked{++i;}\\n        }\\n\\n        // Default to the first operator delegator\\n        return operatorDelegators[0];\\n    }\\n\\n    /// @dev Determines the OD to withdraw from\\n    /// It will try to use the OD with the TVL above the allocation threshold that has the tokens to withdraw\\n    /// If no OD is over the allocation and has tokens, it will try to find one that has the tokens to withdraw\\n    /// If no OD has the tokens to withdraw, it will revert\\n    /// @return The OperatorDelegator to use\\n    function chooseOperatorDelegatorForWithdraw(\\n        uint256 tokenIndex,\\n        uint256 ezETHValue,\\n        uint256[][] memory operatorDelegatorTokenTVLs,\\n        uint256[] memory operatorDelegatorTVLs,\\n        uint256 totalTVL\\n    ) public view returns (IOperatorDelegator) {\\n        // If there is only one operator delegator, try to use it\\n        if (operatorDelegators.length == 1) {\\n            // If the OD doesn't have the tokens, revert\\n            if (operatorDelegatorTokenTVLs[0][tokenIndex] < ezETHValue) {\\n                revert NotFound();\\n            }\\n            return operatorDelegators[0];\\n        }\\n\\n        // Fnd the operator delegator with TVL above the threshold and with enough tokens\\n        uint256 odLength = operatorDelegatorTVLs.length;\\n        for (uint256 i = 0; i < odLength;) {\\n            if (\\n                operatorDelegatorTVLs[i] >\\n                (operatorDelegatorAllocations[operatorDelegators[i]] *\\n                    totalTVL) /\\n                    BASIS_POINTS /\\n                    BASIS_POINTS &&\\n                operatorDelegatorTokenTVLs[i][tokenIndex] >= ezETHValue\\n            ) {\\n                return operatorDelegators[i];\\n            }\\n\\n            unchecked{++i;}\\n        }\\n\\n        // If not found, just find one with enough tokens        \\n        for (uint256 i = 0; i < odLength;) {\\n            if (operatorDelegatorTokenTVLs[i][tokenIndex] >= ezETHValue) {\\n                return operatorDelegators[i];\\n            }\\n\\n            unchecked{++i;}\\n        }\\n\\n        // This token cannot be withdrawn\\n        revert NotFound();\\n    }\\n\\n    /// @dev Finds the index of the collateral token in the list\\n    /// Reverts if the token is not found in the list\\n    function getCollateralTokenIndex(\\n        IERC20 _collateralToken\\n    ) public view returns (uint256) {\\n        // Find the token index\\n        uint256 tokenLength = collateralTokens.length;\\n        for (uint256 i = 0; i < tokenLength;) {\\n            if (collateralTokens[i] == _collateralToken) {\\n                return i;\\n            }\\n\\n            unchecked{++i;}\\n        }\\n\\n        revert NotFound();\\n    }\\n\\n    /**\\n     * @notice  Deposits an ERC20 collateral token into the protocol\\n     * @dev\\n     * The msg.sender must pre-approve this contract to move the tokens into the protocol\\n     * To deposit, the contract will:\\n     *   - Figure out which operator delegator to use\\n     *   - Transfer the collateral token to the operator delegator and deposit it into EigenLayer\\n     *   - Calculate and mint the appropriate amount of ezETH back to the user\\n     * ezETH will get inflated proportional to the value they are depositing vs the value already in the protocol\\n     * The collateral token specified must be pre-configured to be allowed in the protocol\\n     * @param   _collateralToken  The address of the collateral ERC20 token to deposit\\n     * @param   _amount The amount of the collateral token to deposit in base units\\n     */\\n    function deposit(\\n        IERC20 _collateralToken,\\n        uint256 _amount\\n    ) external nonReentrant notPaused {\\n        // Verify collateral token is in the list - call will revert if not found\\n        getCollateralTokenIndex(_collateralToken);\\n\\n        // Get the TVLs for each operator delegator and the total TVL\\n        (\\n            ,\\n            uint256[] memory operatorDelegatorTVLs,\\n            uint256 totalTVL\\n        ) = calculateTVLs();\\n\\n        // Get the value of the collateral token being deposited\\n        uint256 collateralTokenValue = renzoOracle.lookupTokenValue(\\n            _collateralToken,\\n            _amount\\n        );\\n\\n        // Enforce TVL limit if set\\n        if(maxDepositTVL != 0 && totalTVL + collateralTokenValue > maxDepositTVL) {\\n            revert MaxTVLReached();\\n        }\\n\\n\\n        // Determine which operator delegator to use\\n        IOperatorDelegator operatorDelegator = chooseOperatorDelegatorForDeposit(\\n                operatorDelegatorTVLs,\\n                totalTVL\\n            );\\n\\n        // Transfer the collateral token to this address\\n        _collateralToken.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        // Approve the tokens to the operator delegator\\n        _collateralToken.safeApprove(address(operatorDelegator), _amount);\\n\\n        // Call deposit on the operator delegator\\n        operatorDelegator.deposit(_collateralToken, _amount);\\n\\n        // Calculate how much ezETH to mint\\n        uint256 ezETHToMint = renzoOracle.calculateMintAmount(\\n            totalTVL,\\n            collateralTokenValue,\\n            ezETH.totalSupply()\\n        );\\n\\n        // Mint the ezETH\\n        ezETH.mint(msg.sender, ezETHToMint);\\n\\n        // Emit the deposit event\\n        emit Deposit(msg.sender, _collateralToken, _amount, ezETHToMint);\\n    }\\n\\n    /// @dev \\n\\n    /**\\n     * @notice  Starts a 2 phase withdraw of a collateral token from the protocol in exchange for ezETH\\n     * @dev  The msg.sender must pre-approve this contract to move the ezETH into the protocol\\n     * The amount of tokens the user is requesting must be available to withdraw from a single OperatorDelegator\\n     * The OD will be chosen based on the weightings and current value held in each OD on Eigenlayer\\n     * To complete the withdaw, the caller must call completeWithdraw after the withdraw period has passed\\n     * The ezETH will be held in this contract until the withdraw is completed\\n     * @param   _ezEThToBurn  The amount of ezETH to burn in base units\\n     * @param   _tokenToWithdraw  The address of the collateral ERC20 token to withdraw\\n     * @return  bytes32  The withdrawal root of the EigenLayer deposit\\n     */\\n    function startWithdraw(\\n        uint256 _ezEThToBurn,\\n        IERC20 _tokenToWithdraw\\n    ) external nonReentrant notPaused returns (bytes32) {\\n        // Move the ezETH into this contract\\n        ezETH.safeTransferFrom(msg.sender, address(this), _ezEThToBurn);\\n\\n        // Get the TVLs for each operator delegator and the total TVL\\n        (\\n            uint256[][] memory operatorDelegatorTokenTVLs,\\n            uint256[] memory operatorDelegatorTVLs,\\n            uint256 totalTVL\\n        ) = calculateTVLs();\\n\\n        // Get the value of the ezETH being burned\\n        uint256 ezETHValue = renzoOracle.calculateRedeemAmount(\\n            _ezEThToBurn,\\n            ezETH.totalSupply(),\\n            totalTVL\\n        );\\n\\n        // Find the token index\\n        uint256 tokenIndex = getCollateralTokenIndex(_tokenToWithdraw);\\n\\n        // Choose the OD to withdraw from\\n        IOperatorDelegator operatorDelegator = chooseOperatorDelegatorForWithdraw(\\n                tokenIndex,\\n                ezETHValue,\\n                operatorDelegatorTokenTVLs,\\n                operatorDelegatorTVLs,\\n                totalTVL\\n            );\\n\\n        // Get the number of tokens to withdraw from the value\\n        uint256 numTokensToWithdraw = renzoOracle.lookupTokenAmountFromValue(\\n            _tokenToWithdraw,\\n            ezETHValue\\n        );\\n\\n        // Start withdraw period\\n        bytes32 withdrawalRoot = operatorDelegator.startWithdrawal(\\n            _tokenToWithdraw,\\n            numTokensToWithdraw\\n        );\\n\\n        // Save off pending withdraw, including withdrawal root, how much ezETH to burn, and where to send the tokens on completion\\n        pendingWithdrawals[withdrawalRoot] = PendingWithdrawal({\\n            ezETHToBurn: _ezEThToBurn,\\n            tokenToWithdraw: _tokenToWithdraw,\\n            tokenAmountToWithdraw: numTokensToWithdraw,\\n            withdrawer: msg.sender,\\n            operatorDelegator: operatorDelegator,\\n            completed: false\\n        });\\n\\n        // Emit the withdraw started event\\n        emit UserWithdrawStarted(\\n            withdrawalRoot,\\n            msg.sender,\\n            _tokenToWithdraw,\\n            numTokensToWithdraw,\\n            _ezEThToBurn\\n        );\\n\\n        return withdrawalRoot;\\n    }\\n\\n    /// @dev \\n    /// \\n    /// @return The amount of tokens withdrawn\\n    /**\\n     * @notice  Completes a 2 phase withdraw of a collateral token from the protocol\\n     * @dev     Caller must have called startWithdraw() and waited for the withdraw period to pass\\n     * If the EigenLayer withdraw is completed, the tokens requested will be sent to the withdrawer\\n     * The ezETH deposited in startWithdraw() will be burned from this contract\\n     * @param   withdrawal  The data from startWithdraw()\\n     * @param   middlewareTimesIndex  From EigenLayer - not used in M1 release (can be 0)\\n     * @return  uint256  The amount of tokens withdrawn\\n     */\\n    function completeWithdraw(\\n        IStrategyManager.QueuedWithdrawal calldata withdrawal,\\n        uint256 middlewareTimesIndex\\n    ) external nonReentrant notPaused returns (uint256) {\\n        // Get the withdrawal root for the withdrawal\\n        bytes32 withdrawalRoot = strategyManager.calculateWithdrawalRoot(\\n            withdrawal\\n        );\\n\\n        // Get and verify the pending withdraw\\n        PendingWithdrawal memory pendingWithdrawal = pendingWithdrawals[\\n            withdrawalRoot\\n        ];\\n        if(pendingWithdrawal.completed) revert WithdrawAlreadyCompleted();\\n        if(pendingWithdrawal.withdrawer != msg.sender) revert NotOriginalWithdrawCaller(pendingWithdrawal.withdrawer);\\n\\n        // Complete the withdraw with the Operator Delegator\\n        pendingWithdrawal.operatorDelegator.completeWithdrawal(\\n            withdrawal,\\n            pendingWithdrawal.tokenToWithdraw,\\n            middlewareTimesIndex,\\n            msg.sender\\n        );\\n\\n        // Burn the ezETH from this contract\\n        ezETH.burn(address(this), pendingWithdrawal.ezETHToBurn);\\n\\n        // Mark the pending withdraw as completed\\n        pendingWithdrawals[withdrawalRoot].completed = true;\\n\\n        // Emit the withdraw completed event\\n        emit UserWithdrawCompleted(\\n            withdrawalRoot,\\n            msg.sender,\\n            pendingWithdrawal.tokenToWithdraw,\\n            pendingWithdrawal.tokenAmountToWithdraw,\\n            pendingWithdrawal.ezETHToBurn\\n        );\\n\\n        return pendingWithdrawal.tokenAmountToWithdraw;\\n    }\\n\\n    /**\\n     * @notice  Allows a user to deposit ETH into the protocol and get back ezETH\\n     * @dev     The amount of ETH sent into this function will be sent to the deposit queue to be \\n     * staked later by a validator.  Once staked it will be deposited into EigenLayer.\\n     */\\n    function depositETH() external payable nonReentrant notPaused {\\n        // Get the total TVL\\n        (\\n            ,\\n            ,\\n            uint256 totalTVL\\n        ) = calculateTVLs();\\n\\n        // Enforce TVL limit if set\\n        if(maxDepositTVL != 0 && totalTVL + msg.value > maxDepositTVL) {\\n            revert MaxTVLReached();\\n        }\\n\\n        // Deposit the ETH into the DepositQueue\\n        depositQueue.depositETHFromProtocol{value: msg.value}();\\n\\n        // Calculate how much ezETH to mint\\n        uint256 ezETHToMint = renzoOracle.calculateMintAmount(\\n            totalTVL,\\n            msg.value,\\n            ezETH.totalSupply()\\n        );\\n\\n        // Mint the ezETH\\n        ezETH.mint(msg.sender, ezETHToMint);\\n\\n        // Emit the deposit event\\n        emit Deposit(msg.sender, IERC20(address(0x0)), msg.value, ezETHToMint);\\n    }\\n\\n    /// @dev Called by the deposit queue to stake ETH to a validator\\n    /// Only callable by the deposit queue\\n    function stakeEthInOperatorDelegator(IOperatorDelegator operatorDelegator, bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable onlyDepositQueue {\\n        // Verify the OD is in the list\\n        bool found = false;\\n        uint256 odLength = operatorDelegators.length;\\n        for (uint256 i = 0; i < odLength;) {\\n            if (operatorDelegators[i] == operatorDelegator) {\\n                found = true;\\n                break;\\n            }\\n\\n            unchecked{++i;}\\n        }\\n        if(!found) revert NotFound();\\n\\n        // Call the OD to stake the ETH\\n        operatorDelegator.stakeEth{value: msg.value}(pubkey, signature, depositDataRoot);\\n    }\\n\\n    /// @dev Deposit ERC20 token rewards from the Deposit Queue\\n    /// Only callable by the deposit queue\\n    function depositTokenRewardsFromProtocol(\\n        IERC20 _token,\\n        uint256 _amount\\n    ) external onlyDepositQueue {        \\n        \\n        // Get the TVLs for each operator delegator and the total TVL\\n        (\\n            ,\\n            uint256[] memory operatorDelegatorTVLs,\\n            uint256 totalTVL\\n        ) = calculateTVLs();\\n\\n        // Determine which operator delegator to use\\n        IOperatorDelegator operatorDelegator = chooseOperatorDelegatorForDeposit(\\n                operatorDelegatorTVLs,\\n                totalTVL\\n            );\\n\\n        // Transfer the tokens to this address\\n        _token.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        // Approve the tokens to the operator delegator\\n        _token.safeApprove(address(operatorDelegator), _amount);\\n\\n        // Deposit the tokens into EigenLayer\\n        operatorDelegator.deposit(_token, _amount);\\n    }\\n\\n    /**\\n     * @notice  Returns the total amount of rewards earned by the protocol\\n     * @dev     Rewards include staking native ETH and EigenLayer rewards (ETH + ERC20s)\\n     * @return  uint256  The total amount of rewards earned by the protocol priced in ETH\\n     */\\n    function getTotalRewardsEarned() external view returns (uint256){\\n        uint256 totalRewards = 0;\\n\\n        // First get the ETH rewards tracked in the deposit queue\\n        totalRewards += depositQueue.totalEarned(address(0x0));\\n\\n        // For each token, get the total rewards earned from the deposit queue and price it in ETH\\n        uint256 tokenLength = collateralTokens.length;\\n        for (uint256 i = 0; i < tokenLength;) {    \\n            // Get the amount        \\n            uint256 tokenRewardAmount = depositQueue.totalEarned(address(collateralTokens[i]));\\n\\n            // Convert via the price oracle\\n            totalRewards += renzoOracle.lookupTokenValue(collateralTokens[i], tokenRewardAmount);\\n\\n            unchecked{++i;}\\n        }\\n\\n        // For each OperatorDelegator, get the balance (these are rewards from staking that have not been restaked)\\n        uint256 odLength = operatorDelegators.length;\\n        for (uint256 i = 0; i < odLength;) {\\n            totalRewards += address(operatorDelegators[i].eigenPod()).balance;\\n            unchecked{++i;}\\n        }\\n\\n        return totalRewards;\\n    }\\n}\\n\",\"keccak256\":\"0x331f31b2ed36e5e5516ee75c6df8c341925e213f11cc30cc32ec2de5875212b5\",\"license\":\"BUSL-1.1\"},\"contracts/RestakeManagerStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"./EigenLayer/interfaces/IStrategy.sol\\\";\\nimport \\\"./EigenLayer/interfaces/IDelegationManager.sol\\\";\\nimport \\\"./EigenLayer/interfaces/IStrategyManager.sol\\\";\\nimport \\\"./token/IEzEthToken.sol\\\";\\nimport \\\"./Delegation/IOperatorDelegator.sol\\\";\\nimport \\\"./Permissions/IRoleManager.sol\\\";\\nimport \\\"./Oracle/IRenzoOracle.sol\\\";\\nimport \\\"./Deposits/IDepositQueue.sol\\\";\\n\\nabstract contract RestakeManagerStorageV1 {    \\n    /// @dev reference to the RoleManager contract\\n    IRoleManager public roleManager;\\n\\n    /// @dev reference to the ezETH token contract\\n    IEzEthToken public ezETH;\\n\\n    /// @dev reference to the strategyManager contract in EigenLayer\\n    IStrategyManager public strategyManager;\\n\\n    /// @dev reference to the delegationManager contract in EigenLayer\\n    IDelegationManager public delegationManager;\\n\\n    /// @dev data stored for a withdrawal\\n    struct PendingWithdrawal {\\n        uint256 ezETHToBurn;\\n        address withdrawer;\\n        IERC20 tokenToWithdraw;\\n        uint256 tokenAmountToWithdraw;\\n        IOperatorDelegator operatorDelegator;\\n        bool completed;\\n    }\\n\\n    /// @dev mapping of pending withdrawals, indexed by the withdrawal root from EigenLayer\\n    mapping(bytes32 => PendingWithdrawal) public pendingWithdrawals;   \\n\\n    /// @dev Stores the list of OperatorDelegators\\n    IOperatorDelegator[] public operatorDelegators;\\n\\n    /// @dev Mapping to store the allocations to each operatorDelegator\\n    /// Stored in basis points (e.g. 1% = 100)\\n    mapping(IOperatorDelegator => uint256) public operatorDelegatorAllocations;\\n\\n    /// @dev Stores the list of collateral tokens\\n    IERC20[] public collateralTokens;\\n\\n    /// @dev Reference to the oracle contract\\n    IRenzoOracle public renzoOracle;\\n\\n    /// @dev Controls pause state of contract\\n    bool public paused;\\n\\n    /// @dev The max amount of TVL allowed.  If this is set to 0, no max TVL is enforced\\n    uint256 public maxDepositTVL;\\n\\n    /// @dev Reference to the deposit queue contract\\n    IDepositQueue public depositQueue;\\n}\\n\",\"keccak256\":\"0x3d7106daf7e2673d51e6ba226dc30aa9acb4f2d84aff727a3be440e0f55f06f6\",\"license\":\"BUSL-1.1\"},\"contracts/token/IEzEthToken.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface IEzEthToken is IERC20Upgradeable {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burn(address from, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x886b0c102ff864d9c1a6d50a41508247baa4907d8c20cffcaa8262f1bbe6f630\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b61238b80620000ed6000396000f3fe60806040526004361061011e5760003560e01c80635e91d4a3116100a0578063a0d58d8a11610064578063a0d58d8a14610324578063a3aae13614610344578063ea4d3c9b14610364578063ec73017714610384578063ff0996b5146103a457600080fd5b80635e91d4a3146102915780636d96a2aa146102b1578063864132e6146102d15780639b5cd048146102f15780639ebf4ab11461031157600080fd5b80634665bcda116100e75780634665bcda146101fc57806347e7ef241461021c578063483f34531461023c5780635299ac171461025c578063573803fb1461027c57600080fd5b8062435da514610123578063127842a4146101605780631459457a14610196578063397bfbac146101b857806339b70e38146101dc575b600080fd5b34801561012f57600080fd5b50603354610143906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016c57600080fd5b5061014361017b3660046118f6565b6036602052600090815260409020546001600160a01b031681565b3480156101a257600080fd5b506101b66101b136600461192a565b6103c4565b005b3480156101c457600080fd5b506101ce603b5481565b604051908152602001610157565b3480156101e857600080fd5b50603454610143906001600160a01b031681565b34801561020857600080fd5b50603954610143906001600160a01b031681565b34801561022857600080fd5b506101ce61023736600461199b565b6106d2565b34801561024857600080fd5b506101b6610257366004611adf565b610831565b34801561026857600080fd5b506101b6610277366004611be0565b61096c565b34801561028857600080fd5b506101ce610a98565b34801561029d57600080fd5b506101b66102ac3660046118f6565b610abc565b3480156102bd57600080fd5b50603754610143906001600160a01b031681565b3480156102dd57600080fd5b506101ce6102ec36600461199b565b610c5d565b3480156102fd57600080fd5b506101b661030c366004611c19565b610faf565b6101b661031f366004611ccc565b61111d565b34801561033057600080fd5b506101ce61033f3660046118f6565b6111d2565b34801561035057600080fd5b50603a54610143906001600160a01b031681565b34801561037057600080fd5b50603854610143906001600160a01b031681565b34801561039057600080fd5b506101ce61039f3660046118f6565b611306565b3480156103b057600080fd5b50603554610143906001600160a01b031681565b600054610100900460ff16158080156103e45750600054600160ff909116105b806103fe5750303b1580156103fe575060005460ff166001145b6104665760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610489576000805461ff0019166101001790555b6001600160a01b0386166104b05760405163862a606760e01b815260040160405180910390fd5b6001600160a01b0385166104d75760405163862a606760e01b815260040160405180910390fd5b6001600160a01b0384166104fe5760405163862a606760e01b815260040160405180910390fd5b6001600160a01b0383166105255760405163862a606760e01b815260040160405180910390fd5b6001600160a01b03821661054c5760405163862a606760e01b815260040160405180910390fd5b610554611381565b603380546001600160a01b038089166001600160a01b0319928316179092556034805488841690831617905560358054878416908316179055603880548684169083161790556039805492851692909116821790556040805163426c083160e11b815290516384d810629160048082019260009290919082900301818387803b1580156105e057600080fd5b505af11580156105f4573d6000803e3d6000fd5b5050603954604051639ba0627560e01b81523060048201526001600160a01b039091169250639ba062759150602401602060405180830381865afa158015610640573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106649190611d40565b603a80546001600160a01b0319166001600160a01b039290921691909117905580156106ca576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b60006106dc6113b2565b6035546001600160a01b03163314610707576040516342d16b8b60e11b815260040160405180910390fd5b6001600160a01b038381166000908152603660205260409020541661073f5760405163862a606760e01b815260040160405180910390fd5b816000036107605760405163862a606760e01b815260040160405180910390fd5b6107756001600160a01b03841633308561140b565b60345461078f906001600160a01b03858116911684611476565b6034546001600160a01b03848116600081815260366020526040908190205490516373d0285560e11b8152908316600482015260248101919091526044810185905291169063e7a050aa906064016020604051808303816000875af11580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190611d5d565b905061082b60018055565b92915050565b6033546040516358e3de6f60e01b81523360048201526001600160a01b03909116906358e3de6f90602401602060405180830381865afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190611d76565b6108ba5760405163bcefa34f60e01b815260040160405180910390fd5b603a54604051630a3e0e4160e31b81526001600160a01b03909116906351f07208906108f29088908890889088908890600401611e1a565b600060405180830381600087803b15801561090c57600080fd5b505af1158015610920573d6000803e3d6000fd5b505050506000610934858560400151611596565b905061094e633b9aca0067ffffffffffffffff8316611eb2565b603b600082825461095f9190611ec9565b9091555050505050505050565b6109746113b2565b603354604051630d5dcbef60e31b81523360048201526001600160a01b0390911690636aee5f7890602401602060405180830381865afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190611d76565b6109fd5760405163cbdd1d2760e01b815260040160405180910390fd5b6001600160a01b038216610a245760405163862a606760e01b815260040160405180910390fd5b6001600160a01b0382811660008181526036602090815260409182902080546001600160a01b031916948616948517905581519283528201929092527f1a654dbe468f1cff27ced5a916efd4120a4155caf290688ab42aebe90554683e910160405180910390a1610a9460018055565b5050565b603a54603b54600091610ab7916001600160a01b039091163190611edc565b905090565b610ac46113b2565b603354604051630d5dcbef60e31b81523360048201526001600160a01b0390911690636aee5f7890602401602060405180830381865afa158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b309190611d76565b610b4d5760405163cbdd1d2760e01b815260040160405180910390fd5b6001600160a01b038116610b745760405163862a606760e01b815260040160405180910390fd5b6037546001600160a01b031615610b9e57604051631c52d05d60e11b815260040160405180910390fd5b603780546001600160a01b0319166001600160a01b03838116918217909255603854604051635631be3d60e11b815260048101929092529091169063ac637c7a90602401600060405180830381600087803b158015610bfc57600080fd5b505af1158015610c10573d6000803e3d6000fd5b50506040516001600160a01b03841681527ffe608947467beb30a90e072fd2fc7d52baecf0935f542011fcd8fa6362a5d5b39250602001905060405180910390a1610c5a60018055565b50565b6000610c676113b2565b6035546001600160a01b03163314610c92576040516342d16b8b60e11b815260040160405180910390fd5b6001600160a01b0383811660009081526036602052604090205416610cca5760405163862a606760e01b815260040160405180910390fd5b603454604051630acc620560e31b81523060048201526000916001600160a01b031690635663102890602401602060405180830381865afa158015610d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d379190611d5d565b60408051600180825281830190925291925060009190602080830190803683375050506001600160a01b03868116600090815260366020526040902054919250610d8191166111d2565b81600081518110610d9457610d94611eef565b6020908102919091018101919091526001600160a01b038681166000908152603690925260408083205490516338f6b94760e21b81526004810188905291169063e3dae51c90602401602060405180830381865afa158015610dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1e9190611d5d565b60408051600180825281830190925291925060009190602080830190803683375050506001600160a01b03888116600090815260366020526040812054835193945090911691839190610e7357610e73611eef565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508281600081518110610ec457610ec4611eef565b6020908102919091010152603454604051637891cc8f60e11b81526000916001600160a01b03169063f123991e90610f089088908790879030908890600401611f79565b6020604051808303816000875af1158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190611d5d565b6037546040519192507ff7c9db32693636e458573257dad812f58a7c5cc3067e0fad83b601b46947615a91610f9791849130916001600160a01b03169082908c9043908b908b90611fd5565b60405180910390a19550505050505061082b60018055565b610fb76113b2565b6035546001600160a01b03163314610fe2576040516342d16b8b60e11b815260040160405180910390fd5b60408051600180825281830190925260009160208083019080368337019050509050838160008151811061101857611018611eef565b6001600160a01b03928316602091820292909201015260345460405163f3be65d360e01b815291169063f3be65d39061105c908890859088906001906004016120ed565b600060405180830381600087803b15801561107657600080fd5b505af115801561108a573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015261110d92508491506001600160a01b038716906370a0823190602401602060405180830381865afa1580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc9190611d5d565b6001600160a01b0387169190611625565b5061111760018055565b50505050565b6035546001600160a01b03163314611148576040516342d16b8b60e11b815260040160405180910390fd5b6039546040516326d3918d60e21b81526001600160a01b0390911690639b4e4634903490611182908990899089908990899060040161222d565b6000604051808303818588803b15801561119b57600080fd5b505af11580156111af573d6000803e3d6000fd5b505050505034603b60008282546111c69190611edc565b90915550505050505050565b6034546040516322e2ab0f60e21b815230600482015260009182916001600160a01b0390911690638b8aac3c90602401602060405180830381865afa15801561121f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112439190611d5d565b905060005b818110156112ec576034546040516365e15eb160e11b8152306004820152602481018390526001600160a01b0386811692169063cbc2bd6290604401602060405180830381865afa1580156112a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c59190611d40565b6001600160a01b0316036112da579392505050565b806112e481612267565b915050611248565b5060405163c5723b5160e01b815260040160405180910390fd5b6001600160a01b03818116600090815260366020526040808220549051630aa794bf60e31b81523060048201529192169063553ca5f890602401602060405180830381865afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082b9190611d5d565b600054610100900460ff166113a85760405162461bcd60e51b815260040161045d90612280565b6113b0611655565b565b6002600154036114045760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161045d565b6002600155565b6040516001600160a01b03808516602483015283166044820152606481018290526111179085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261167c565b8015806114f05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156114ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ee9190611d5d565b155b61155b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161045d565b6040516001600160a01b03831660248201526044810182905261158b90849063095ea7b360e01b9060640161143f565b505050565b60018055565b6000806115a46004856122cb565b6115af9060406122fd565b64ffffffffff169290921b60f881901c60e882901c61ff00161760d882901c62ff0000161760c882901c63ff000000161764ff0000000060b883901c161765ff000000000060a883901c161766ff000000000000609883901c161767ff0000000000000060889290921c91909116179392505050565b6040516001600160a01b03831660248201526044810182905261158b90849063a9059cbb60e01b9060640161143f565b600054610100900460ff166115905760405162461bcd60e51b815260040161045d90612280565b60006116d1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117519092919063ffffffff16565b90508051600014806116f25750808060200190518101906116f29190611d76565b61158b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161045d565b60606117608484600085611768565b949350505050565b6060824710156117c95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161045d565b600080866001600160a01b031685876040516117e59190612326565b60006040518083038185875af1925050503d8060008114611822576040519150601f19603f3d011682016040523d82523d6000602084013e611827565b606091505b509150915061183887838387611843565b979650505050505050565b606083156118b25782516000036118ab576001600160a01b0385163b6118ab5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161045d565b5081611760565b61176083838151156118c75781518083602001fd5b8060405162461bcd60e51b815260040161045d9190612342565b6001600160a01b0381168114610c5a57600080fd5b60006020828403121561190857600080fd5b8135611913816118e1565b9392505050565b8035611925816118e1565b919050565b600080600080600060a0868803121561194257600080fd5b853561194d816118e1565b9450602086013561195d816118e1565b9350604086013561196d816118e1565b9250606086013561197d816118e1565b9150608086013561198d816118e1565b809150509295509295909350565b600080604083850312156119ae57600080fd5b82356119b9816118e1565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611a0057611a006119c7565b60405290565b600082601f830112611a1757600080fd5b813567ffffffffffffffff80821115611a3257611a326119c7565b604051601f8301601f19908116603f01168101908282118183101715611a5a57611a5a6119c7565b81604052838152866020858801011115611a7357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f840112611aa557600080fd5b50813567ffffffffffffffff811115611abd57600080fd5b6020830191508360208260051b8501011115611ad857600080fd5b9250929050565b600080600080600060808688031215611af757600080fd5b853567ffffffffffffffff8082168214611b1057600080fd5b90955060208701359064ffffffffff82168214611b2c57600080fd5b90945060408701359080821115611b4257600080fd5b908701906060828a031215611b5657600080fd5b611b5e6119dd565b823582811115611b6d57600080fd5b611b798b828601611a06565b825250602083013582811115611b8e57600080fd5b611b9a8b828601611a06565b60208301525060408301356040820152809550506060880135915080821115611bc257600080fd5b50611bcf88828901611a93565b969995985093965092949392505050565b60008060408385031215611bf357600080fd5b8235611bfe816118e1565b91506020830135611c0e816118e1565b809150509250929050565b60008060008060808587031215611c2f57600080fd5b843567ffffffffffffffff811115611c4657600080fd5b850160e08188031215611c5857600080fd5b93506020850135611c68816118e1565b9250604085013591506060850135611c7f816118e1565b939692955090935050565b60008083601f840112611c9c57600080fd5b50813567ffffffffffffffff811115611cb457600080fd5b602083019150836020828501011115611ad857600080fd5b600080600080600060608688031215611ce457600080fd5b853567ffffffffffffffff80821115611cfc57600080fd5b611d0889838a01611c8a565b90975095506020880135915080821115611d2157600080fd5b50611d2e88828901611c8a565b96999598509660400135949350505050565b600060208284031215611d5257600080fd5b8151611913816118e1565b600060208284031215611d6f57600080fd5b5051919050565b600060208284031215611d8857600080fd5b8151801515811461191357600080fd5b60005b83811015611db3578181015183820152602001611d9b565b50506000910152565b60008151808452611dd4816020860160208601611d98565b601f01601f19169290920160200192915050565b81835260006001600160fb1b03831115611e0157600080fd5b8260051b80836020870137939093016020019392505050565b67ffffffffffffffff8616815264ffffffffff85166020820152608060408201526000845160606080840152611e5360e0840182611dbc565b90506020860151607f198483030160a0850152611e708282611dbc565b915050604086015160c08401528281036060840152611e90818587611de8565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761082b5761082b611e9c565b8181038181111561082b5761082b611e9c565b8082018082111561082b5761082b611e9c565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015611f3557815187529582019590820190600101611f19565b509495945050505050565b600081518084526020808501945080840160005b83811015611f355781516001600160a01b031687529582019590820190600101611f54565b60a081526000611f8c60a0830188611f05565b8281036020840152611f9e8188611f40565b90508281036040840152611fb28187611f05565b6001600160a01b0395909516606084015250509015156080909101529392505050565b8881526001600160a01b0388811660208301528781166040830152861660608201526bffffffffffffffffffffffff8516608082015260a0810184905261010060c0820181905260009061202b83820186611f40565b905082810360e084015261203f8185611f05565b9b9a5050505050505050505050565b6000808335601e1984360301811261206557600080fd5b830160208101925035905067ffffffffffffffff81111561208557600080fd5b8060051b3603821315611ad857600080fd5b80356120a2816118e1565b6001600160a01b0316825260208101356bffffffffffffffffffffffff81168082146120cd57600080fd5b80602085015250505050565b803563ffffffff8116811461192557600080fd5b6080815260006101608201612102878861204e565b60e06080860152918290529060009061018085015b8183101561214857833561212a816118e1565b6001600160a01b031681526020938401936001939093019201612117565b61215560208b018b61204e565b878303607f190160a089015294509250612170818585611de8565b93505050506121816040880161191a565b6001600160a01b031660c084015261219f60e0840160608901612097565b6121ab60a088016120d9565b63ffffffff166101208401526121c360c0880161191a565b6001600160a01b031661014084015282810360208401526121e48187611f40565b9150508360408301526121fb606083018415159052565b95945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606081526000612241606083018789612204565b8281036020840152612254818688612204565b9150508260408301529695505050505050565b60006001820161227957612279611e9c565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600064ffffffffff808416806122f157634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b64ffffffffff81811683821602808216919082811461231e5761231e611e9c565b505092915050565b60008251612338818460208701611d98565b9190910192915050565b6020815260006119136020830184611dbc56fea2646970667358221220230ae0ca5e759ac3530911ad960ce8c15b3c5d9d8c969136f04d1ab9f29958a364736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061011e5760003560e01c80635e91d4a3116100a0578063a0d58d8a11610064578063a0d58d8a14610324578063a3aae13614610344578063ea4d3c9b14610364578063ec73017714610384578063ff0996b5146103a457600080fd5b80635e91d4a3146102915780636d96a2aa146102b1578063864132e6146102d15780639b5cd048146102f15780639ebf4ab11461031157600080fd5b80634665bcda116100e75780634665bcda146101fc57806347e7ef241461021c578063483f34531461023c5780635299ac171461025c578063573803fb1461027c57600080fd5b8062435da514610123578063127842a4146101605780631459457a14610196578063397bfbac146101b857806339b70e38146101dc575b600080fd5b34801561012f57600080fd5b50603354610143906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561016c57600080fd5b5061014361017b3660046118f6565b6036602052600090815260409020546001600160a01b031681565b3480156101a257600080fd5b506101b66101b136600461192a565b6103c4565b005b3480156101c457600080fd5b506101ce603b5481565b604051908152602001610157565b3480156101e857600080fd5b50603454610143906001600160a01b031681565b34801561020857600080fd5b50603954610143906001600160a01b031681565b34801561022857600080fd5b506101ce61023736600461199b565b6106d2565b34801561024857600080fd5b506101b6610257366004611adf565b610831565b34801561026857600080fd5b506101b6610277366004611be0565b61096c565b34801561028857600080fd5b506101ce610a98565b34801561029d57600080fd5b506101b66102ac3660046118f6565b610abc565b3480156102bd57600080fd5b50603754610143906001600160a01b031681565b3480156102dd57600080fd5b506101ce6102ec36600461199b565b610c5d565b3480156102fd57600080fd5b506101b661030c366004611c19565b610faf565b6101b661031f366004611ccc565b61111d565b34801561033057600080fd5b506101ce61033f3660046118f6565b6111d2565b34801561035057600080fd5b50603a54610143906001600160a01b031681565b34801561037057600080fd5b50603854610143906001600160a01b031681565b34801561039057600080fd5b506101ce61039f3660046118f6565b611306565b3480156103b057600080fd5b50603554610143906001600160a01b031681565b600054610100900460ff16158080156103e45750600054600160ff909116105b806103fe5750303b1580156103fe575060005460ff166001145b6104665760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610489576000805461ff0019166101001790555b6001600160a01b0386166104b05760405163862a606760e01b815260040160405180910390fd5b6001600160a01b0385166104d75760405163862a606760e01b815260040160405180910390fd5b6001600160a01b0384166104fe5760405163862a606760e01b815260040160405180910390fd5b6001600160a01b0383166105255760405163862a606760e01b815260040160405180910390fd5b6001600160a01b03821661054c5760405163862a606760e01b815260040160405180910390fd5b610554611381565b603380546001600160a01b038089166001600160a01b0319928316179092556034805488841690831617905560358054878416908316179055603880548684169083161790556039805492851692909116821790556040805163426c083160e11b815290516384d810629160048082019260009290919082900301818387803b1580156105e057600080fd5b505af11580156105f4573d6000803e3d6000fd5b5050603954604051639ba0627560e01b81523060048201526001600160a01b039091169250639ba062759150602401602060405180830381865afa158015610640573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106649190611d40565b603a80546001600160a01b0319166001600160a01b039290921691909117905580156106ca576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b60006106dc6113b2565b6035546001600160a01b03163314610707576040516342d16b8b60e11b815260040160405180910390fd5b6001600160a01b038381166000908152603660205260409020541661073f5760405163862a606760e01b815260040160405180910390fd5b816000036107605760405163862a606760e01b815260040160405180910390fd5b6107756001600160a01b03841633308561140b565b60345461078f906001600160a01b03858116911684611476565b6034546001600160a01b03848116600081815260366020526040908190205490516373d0285560e11b8152908316600482015260248101919091526044810185905291169063e7a050aa906064016020604051808303816000875af11580156107fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108209190611d5d565b905061082b60018055565b92915050565b6033546040516358e3de6f60e01b81523360048201526001600160a01b03909116906358e3de6f90602401602060405180830381865afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190611d76565b6108ba5760405163bcefa34f60e01b815260040160405180910390fd5b603a54604051630a3e0e4160e31b81526001600160a01b03909116906351f07208906108f29088908890889088908890600401611e1a565b600060405180830381600087803b15801561090c57600080fd5b505af1158015610920573d6000803e3d6000fd5b505050506000610934858560400151611596565b905061094e633b9aca0067ffffffffffffffff8316611eb2565b603b600082825461095f9190611ec9565b9091555050505050505050565b6109746113b2565b603354604051630d5dcbef60e31b81523360048201526001600160a01b0390911690636aee5f7890602401602060405180830381865afa1580156109bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109e09190611d76565b6109fd5760405163cbdd1d2760e01b815260040160405180910390fd5b6001600160a01b038216610a245760405163862a606760e01b815260040160405180910390fd5b6001600160a01b0382811660008181526036602090815260409182902080546001600160a01b031916948616948517905581519283528201929092527f1a654dbe468f1cff27ced5a916efd4120a4155caf290688ab42aebe90554683e910160405180910390a1610a9460018055565b5050565b603a54603b54600091610ab7916001600160a01b039091163190611edc565b905090565b610ac46113b2565b603354604051630d5dcbef60e31b81523360048201526001600160a01b0390911690636aee5f7890602401602060405180830381865afa158015610b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b309190611d76565b610b4d5760405163cbdd1d2760e01b815260040160405180910390fd5b6001600160a01b038116610b745760405163862a606760e01b815260040160405180910390fd5b6037546001600160a01b031615610b9e57604051631c52d05d60e11b815260040160405180910390fd5b603780546001600160a01b0319166001600160a01b03838116918217909255603854604051635631be3d60e11b815260048101929092529091169063ac637c7a90602401600060405180830381600087803b158015610bfc57600080fd5b505af1158015610c10573d6000803e3d6000fd5b50506040516001600160a01b03841681527ffe608947467beb30a90e072fd2fc7d52baecf0935f542011fcd8fa6362a5d5b39250602001905060405180910390a1610c5a60018055565b50565b6000610c676113b2565b6035546001600160a01b03163314610c92576040516342d16b8b60e11b815260040160405180910390fd5b6001600160a01b0383811660009081526036602052604090205416610cca5760405163862a606760e01b815260040160405180910390fd5b603454604051630acc620560e31b81523060048201526000916001600160a01b031690635663102890602401602060405180830381865afa158015610d13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d379190611d5d565b60408051600180825281830190925291925060009190602080830190803683375050506001600160a01b03868116600090815260366020526040902054919250610d8191166111d2565b81600081518110610d9457610d94611eef565b6020908102919091018101919091526001600160a01b038681166000908152603690925260408083205490516338f6b94760e21b81526004810188905291169063e3dae51c90602401602060405180830381865afa158015610dfa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e1e9190611d5d565b60408051600180825281830190925291925060009190602080830190803683375050506001600160a01b03888116600090815260366020526040812054835193945090911691839190610e7357610e73611eef565b6001600160a01b0392909216602092830291909101909101526040805160018082528183019092526000918160200160208202803683370190505090508281600081518110610ec457610ec4611eef565b6020908102919091010152603454604051637891cc8f60e11b81526000916001600160a01b03169063f123991e90610f089088908790879030908890600401611f79565b6020604051808303816000875af1158015610f27573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4b9190611d5d565b6037546040519192507ff7c9db32693636e458573257dad812f58a7c5cc3067e0fad83b601b46947615a91610f9791849130916001600160a01b03169082908c9043908b908b90611fd5565b60405180910390a19550505050505061082b60018055565b610fb76113b2565b6035546001600160a01b03163314610fe2576040516342d16b8b60e11b815260040160405180910390fd5b60408051600180825281830190925260009160208083019080368337019050509050838160008151811061101857611018611eef565b6001600160a01b03928316602091820292909201015260345460405163f3be65d360e01b815291169063f3be65d39061105c908890859088906001906004016120ed565b600060405180830381600087803b15801561107657600080fd5b505af115801561108a573d6000803e3d6000fd5b50506040516370a0823160e01b815230600482015261110d92508491506001600160a01b038716906370a0823190602401602060405180830381865afa1580156110d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110fc9190611d5d565b6001600160a01b0387169190611625565b5061111760018055565b50505050565b6035546001600160a01b03163314611148576040516342d16b8b60e11b815260040160405180910390fd5b6039546040516326d3918d60e21b81526001600160a01b0390911690639b4e4634903490611182908990899089908990899060040161222d565b6000604051808303818588803b15801561119b57600080fd5b505af11580156111af573d6000803e3d6000fd5b505050505034603b60008282546111c69190611edc565b90915550505050505050565b6034546040516322e2ab0f60e21b815230600482015260009182916001600160a01b0390911690638b8aac3c90602401602060405180830381865afa15801561121f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112439190611d5d565b905060005b818110156112ec576034546040516365e15eb160e11b8152306004820152602481018390526001600160a01b0386811692169063cbc2bd6290604401602060405180830381865afa1580156112a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c59190611d40565b6001600160a01b0316036112da579392505050565b806112e481612267565b915050611248565b5060405163c5723b5160e01b815260040160405180910390fd5b6001600160a01b03818116600090815260366020526040808220549051630aa794bf60e31b81523060048201529192169063553ca5f890602401602060405180830381865afa15801561135d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082b9190611d5d565b600054610100900460ff166113a85760405162461bcd60e51b815260040161045d90612280565b6113b0611655565b565b6002600154036114045760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161045d565b6002600155565b6040516001600160a01b03808516602483015283166044820152606481018290526111179085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261167c565b8015806114f05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156114ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ee9190611d5d565b155b61155b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161045d565b6040516001600160a01b03831660248201526044810182905261158b90849063095ea7b360e01b9060640161143f565b505050565b60018055565b6000806115a46004856122cb565b6115af9060406122fd565b64ffffffffff169290921b60f881901c60e882901c61ff00161760d882901c62ff0000161760c882901c63ff000000161764ff0000000060b883901c161765ff000000000060a883901c161766ff000000000000609883901c161767ff0000000000000060889290921c91909116179392505050565b6040516001600160a01b03831660248201526044810182905261158b90849063a9059cbb60e01b9060640161143f565b600054610100900460ff166115905760405162461bcd60e51b815260040161045d90612280565b60006116d1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166117519092919063ffffffff16565b90508051600014806116f25750808060200190518101906116f29190611d76565b61158b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161045d565b60606117608484600085611768565b949350505050565b6060824710156117c95760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161045d565b600080866001600160a01b031685876040516117e59190612326565b60006040518083038185875af1925050503d8060008114611822576040519150601f19603f3d011682016040523d82523d6000602084013e611827565b606091505b509150915061183887838387611843565b979650505050505050565b606083156118b25782516000036118ab576001600160a01b0385163b6118ab5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161045d565b5081611760565b61176083838151156118c75781518083602001fd5b8060405162461bcd60e51b815260040161045d9190612342565b6001600160a01b0381168114610c5a57600080fd5b60006020828403121561190857600080fd5b8135611913816118e1565b9392505050565b8035611925816118e1565b919050565b600080600080600060a0868803121561194257600080fd5b853561194d816118e1565b9450602086013561195d816118e1565b9350604086013561196d816118e1565b9250606086013561197d816118e1565b9150608086013561198d816118e1565b809150509295509295909350565b600080604083850312156119ae57600080fd5b82356119b9816118e1565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff81118282101715611a0057611a006119c7565b60405290565b600082601f830112611a1757600080fd5b813567ffffffffffffffff80821115611a3257611a326119c7565b604051601f8301601f19908116603f01168101908282118183101715611a5a57611a5a6119c7565b81604052838152866020858801011115611a7357600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008083601f840112611aa557600080fd5b50813567ffffffffffffffff811115611abd57600080fd5b6020830191508360208260051b8501011115611ad857600080fd5b9250929050565b600080600080600060808688031215611af757600080fd5b853567ffffffffffffffff8082168214611b1057600080fd5b90955060208701359064ffffffffff82168214611b2c57600080fd5b90945060408701359080821115611b4257600080fd5b908701906060828a031215611b5657600080fd5b611b5e6119dd565b823582811115611b6d57600080fd5b611b798b828601611a06565b825250602083013582811115611b8e57600080fd5b611b9a8b828601611a06565b60208301525060408301356040820152809550506060880135915080821115611bc257600080fd5b50611bcf88828901611a93565b969995985093965092949392505050565b60008060408385031215611bf357600080fd5b8235611bfe816118e1565b91506020830135611c0e816118e1565b809150509250929050565b60008060008060808587031215611c2f57600080fd5b843567ffffffffffffffff811115611c4657600080fd5b850160e08188031215611c5857600080fd5b93506020850135611c68816118e1565b9250604085013591506060850135611c7f816118e1565b939692955090935050565b60008083601f840112611c9c57600080fd5b50813567ffffffffffffffff811115611cb457600080fd5b602083019150836020828501011115611ad857600080fd5b600080600080600060608688031215611ce457600080fd5b853567ffffffffffffffff80821115611cfc57600080fd5b611d0889838a01611c8a565b90975095506020880135915080821115611d2157600080fd5b50611d2e88828901611c8a565b96999598509660400135949350505050565b600060208284031215611d5257600080fd5b8151611913816118e1565b600060208284031215611d6f57600080fd5b5051919050565b600060208284031215611d8857600080fd5b8151801515811461191357600080fd5b60005b83811015611db3578181015183820152602001611d9b565b50506000910152565b60008151808452611dd4816020860160208601611d98565b601f01601f19169290920160200192915050565b81835260006001600160fb1b03831115611e0157600080fd5b8260051b80836020870137939093016020019392505050565b67ffffffffffffffff8616815264ffffffffff85166020820152608060408201526000845160606080840152611e5360e0840182611dbc565b90506020860151607f198483030160a0850152611e708282611dbc565b915050604086015160c08401528281036060840152611e90818587611de8565b98975050505050505050565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141761082b5761082b611e9c565b8181038181111561082b5761082b611e9c565b8082018082111561082b5761082b611e9c565b634e487b7160e01b600052603260045260246000fd5b600081518084526020808501945080840160005b83811015611f3557815187529582019590820190600101611f19565b509495945050505050565b600081518084526020808501945080840160005b83811015611f355781516001600160a01b031687529582019590820190600101611f54565b60a081526000611f8c60a0830188611f05565b8281036020840152611f9e8188611f40565b90508281036040840152611fb28187611f05565b6001600160a01b0395909516606084015250509015156080909101529392505050565b8881526001600160a01b0388811660208301528781166040830152861660608201526bffffffffffffffffffffffff8516608082015260a0810184905261010060c0820181905260009061202b83820186611f40565b905082810360e084015261203f8185611f05565b9b9a5050505050505050505050565b6000808335601e1984360301811261206557600080fd5b830160208101925035905067ffffffffffffffff81111561208557600080fd5b8060051b3603821315611ad857600080fd5b80356120a2816118e1565b6001600160a01b0316825260208101356bffffffffffffffffffffffff81168082146120cd57600080fd5b80602085015250505050565b803563ffffffff8116811461192557600080fd5b6080815260006101608201612102878861204e565b60e06080860152918290529060009061018085015b8183101561214857833561212a816118e1565b6001600160a01b031681526020938401936001939093019201612117565b61215560208b018b61204e565b878303607f190160a089015294509250612170818585611de8565b93505050506121816040880161191a565b6001600160a01b031660c084015261219f60e0840160608901612097565b6121ab60a088016120d9565b63ffffffff166101208401526121c360c0880161191a565b6001600160a01b031661014084015282810360208401526121e48187611f40565b9150508360408301526121fb606083018415159052565b95945050505050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b606081526000612241606083018789612204565b8281036020840152612254818688612204565b9150508260408301529695505050505050565b60006001820161227957612279611e9c565b5060010190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600064ffffffffff808416806122f157634e487b7160e01b600052601260045260246000fd5b92169190910692915050565b64ffffffffff81811683821602808216919082811461231e5761231e611e9c565b505092915050565b60008251612338818460208701611d98565b9190910192915050565b6020815260006119136020830184611dbc56fea2646970667358221220230ae0ca5e759ac3530911ad960ce8c15b3c5d9d8c969136f04d1ab9f29958a364736f6c63430008130033",
  "devdoc": {
    "details": "This contract will be responsible for interacting with Eigenlayer Each of these contracts deployed will be delegated to one specific operator This contract can handle multiple ERC20 tokens, all of which will be delegated to the same operator Each supported ERC20 token will be pointed at a single Strategy contract in EL Only the RestakeManager should be interacting with this contract for EL interactions.",
    "errors": {
      "DelegateAddressAlreadySet()": [
        {
          "details": "Error when delegation address was already set - cannot be set again"
        }
      ],
      "InvalidZeroInput()": [
        {
          "details": "Error for 0x0 address inputs"
        }
      ],
      "NotFound()": [
        {
          "details": "Error for not found items in a list"
        }
      ],
      "NotNativeEthRestakeAdmin()": [
        {
          "details": "Errror when caller does not have ETH Restake Admin role"
        }
      ],
      "NotOperatorDelegatorAdmin()": [
        {
          "details": "Error when caller does not have OD admin role"
        }
      ],
      "NotRestakeManager()": [
        {
          "details": "Error when caller is not RestakeManager contract"
        }
      ]
    },
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "completeWithdrawal((address[],uint256[],address,(address,uint96),uint32,address),address,uint256,address)": {
        "details": "Completes a withdrawal of a specific token from the EigenLayer. The tokens withdrawn will be sent directly to the specified address"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "details": "Prevents implementation contract from being initialized."
      },
      "deposit(address,uint256)": {
        "details": "Deposit tokens into the EigenLayer.  This call assumes any balance of tokens in this contract will be delegated so do not directly send tokens here or they will be delegated and attributed to the next caller.",
        "returns": {
          "shares": "The amount of new shares in the `strategy` created as part of the action."
        }
      },
      "getStakedETHBalance()": {
        "details": "Gets the amount of ETH staked in the EigenLayer"
      },
      "getStrategyIndex(address)": {
        "details": "Gets the index of the specific strategy in EigenLayer in the staker's strategy list"
      },
      "getTokenBalanceFromStrategy(address)": {
        "details": "Gets the underlying token amount from the amount of shares"
      },
      "initialize(address,address,address,address,address)": {
        "details": "Initializes the contract with initial vars"
      },
      "setDelegateAddress(address)": {
        "details": "Sets the address to delegate tokens to in EigenLayer -- THIS CAN ONLY BE SET ONCE"
      },
      "setTokenStrategy(address,address)": {
        "details": "Sets the strategy for a given token - setting strategy to 0x0 removes the ability to deposit and withdraw token"
      },
      "stakeEth(bytes,bytes,bytes32)": {
        "details": "Stake ETH in the EigenLayer Only the Restake Manager should call this function"
      },
      "startWithdrawal(address,uint256)": {
        "details": "Starts a withdrawal of a specific token from the EigenLayer.",
        "params": {
          "_token": "The token to withdraw from the EigenLayer.",
          "_tokenAmount": "The amount of tokens to withdraw."
        }
      },
      "verifyWithdrawalCredentials(uint64,uint40,(bytes,bytes,bytes32),bytes32[])": {
        "details": "Verifies the withdrawal credentials for a withdrawal This will allow the EigenPodManager to verify the withdrawal credentials and credit the OD with shares Only the native eth restake admin should call this function"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 461,
        "contract": "contracts/Delegation/OperatorDelegator.sol:OperatorDelegator",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 464,
        "contract": "contracts/Delegation/OperatorDelegator.sol:OperatorDelegator",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 637,
        "contract": "contracts/Delegation/OperatorDelegator.sol:OperatorDelegator",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 706,
        "contract": "contracts/Delegation/OperatorDelegator.sol:OperatorDelegator",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5142,
        "contract": "contracts/Delegation/OperatorDelegator.sol:OperatorDelegator",
        "label": "roleManager",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IRoleManager)11263"
      },
      {
        "astId": 5146,
        "contract": "contracts/Delegation/OperatorDelegator.sol:OperatorDelegator",
        "label": "strategyManager",
        "offset": 0,
        "slot": "52",
        "type": "t_contract(IStrategyManager)7545"
      },
      {
        "astId": 5149,
        "contract": "contracts/Delegation/OperatorDelegator.sol:OperatorDelegator",
        "label": "restakeManager",
        "offset": 0,
        "slot": "53",
        "type": "t_address"
      },
      {
        "astId": 5156,
        "contract": "contracts/Delegation/OperatorDelegator.sol:OperatorDelegator",
        "label": "tokenStrategyMapping",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_contract(IERC20)3540,t_contract(IStrategy)7271)"
      },
      {
        "astId": 5159,
        "contract": "contracts/Delegation/OperatorDelegator.sol:OperatorDelegator",
        "label": "delegateAddress",
        "offset": 0,
        "slot": "55",
        "type": "t_address"
      },
      {
        "astId": 5163,
        "contract": "contracts/Delegation/OperatorDelegator.sol:OperatorDelegator",
        "label": "delegationManager",
        "offset": 0,
        "slot": "56",
        "type": "t_contract(IDelegationManager)6139"
      },
      {
        "astId": 5167,
        "contract": "contracts/Delegation/OperatorDelegator.sol:OperatorDelegator",
        "label": "eigenPodManager",
        "offset": 0,
        "slot": "57",
        "type": "t_contract(IEigenPodManager)6499"
      },
      {
        "astId": 5171,
        "contract": "contracts/Delegation/OperatorDelegator.sol:OperatorDelegator",
        "label": "eigenPod",
        "offset": 0,
        "slot": "58",
        "type": "t_contract(IEigenPod)6386"
      },
      {
        "astId": 5174,
        "contract": "contracts/Delegation/OperatorDelegator.sol:OperatorDelegator",
        "label": "stakedButNotVerifiedEth",
        "offset": 0,
        "slot": "59",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDelegationManager)6139": {
        "encoding": "inplace",
        "label": "contract IDelegationManager",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3540": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IEigenPod)6386": {
        "encoding": "inplace",
        "label": "contract IEigenPod",
        "numberOfBytes": "20"
      },
      "t_contract(IEigenPodManager)6499": {
        "encoding": "inplace",
        "label": "contract IEigenPodManager",
        "numberOfBytes": "20"
      },
      "t_contract(IRoleManager)11263": {
        "encoding": "inplace",
        "label": "contract IRoleManager",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategy)7271": {
        "encoding": "inplace",
        "label": "contract IStrategy",
        "numberOfBytes": "20"
      },
      "t_contract(IStrategyManager)7545": {
        "encoding": "inplace",
        "label": "contract IStrategyManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20)3540,t_contract(IStrategy)7271)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)3540",
        "label": "mapping(contract IERC20 => contract IStrategy)",
        "numberOfBytes": "32",
        "value": "t_contract(IStrategy)7271"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}