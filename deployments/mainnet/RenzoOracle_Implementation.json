{
  "address": "0x94Eb8aF1bdfaA82fd50C34d34c4BcA2EFd8c79BF",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "expected",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "actual",
          "type": "uint8"
        }
      ],
      "name": "InvalidTokenDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidZeroInput",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MismatchedArrayLengths",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotOracleAdmin",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OracleNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OraclePriceExpired",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract AggregatorV3Interface",
          "name": "oracleAddress",
          "type": "address"
        }
      ],
      "name": "OracleAddressUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_currentValueInProtocol",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_newValueAdded",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_existingEzETHSupply",
          "type": "uint256"
        }
      ],
      "name": "calculateMintAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_ezETHBeingBurned",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_existingEzETHSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currentValueInProtocol",
          "type": "uint256"
        }
      ],
      "name": "calculateRedeemAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRoleManager",
          "name": "_roleManager",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "lookupTokenAmountFromValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_balance",
          "type": "uint256"
        }
      ],
      "name": "lookupTokenValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20[]",
          "name": "_tokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_balances",
          "type": "uint256[]"
        }
      ],
      "name": "lookupTokenValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roleManager",
      "outputs": [
        {
          "internalType": "contract IRoleManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "_oracleAddress",
          "type": "address"
        }
      ],
      "name": "setOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenOracleLookup",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf9ce87b3d4e578978183ed67484fc2c311c3fb821b475568f9faef5da0803d0b",
  "receipt": {
    "to": null,
    "from": "0xB7d2E57aE1a8eCc5f5487b010E1fCd60f4b84dC0",
    "contractAddress": "0x94Eb8aF1bdfaA82fd50C34d34c4BcA2EFd8c79BF",
    "transactionIndex": 171,
    "gasUsed": "795495",
    "logsBloom": "0x
    "blockHash": "0x5657fd96c07c60616e2dd1f70d4721268e4fbe4e0e3578bf525708a6373dd238",
    "transactionHash": "0xf9ce87b3d4e578978183ed67484fc2c311c3fb821b475568f9faef5da0803d0b",
    "logs": [
      {
        "transactionIndex": 171,
        "blockNumber": 18722782,
        "transactionHash": "0xf9ce87b3d4e578978183ed67484fc2c311c3fb821b475568f9faef5da0803d0b",
        "address": "0x94Eb8aF1bdfaA82fd50C34d34c4BcA2EFd8c79BF",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 245,
        "blockHash": "0x5657fd96c07c60616e2dd1f70d4721268e4fbe4e0e3578bf525708a6373dd238"
      }
    ],
    "blockNumber": 18722782,
    "cumulativeGasUsed": "13418209",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e61991be36f3b065cf1f32b510d9735d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"expected\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"actual\",\"type\":\"uint8\"}],\"name\":\"InvalidTokenDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroInput\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MismatchedArrayLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOracleAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OracleNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OraclePriceExpired\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"oracleAddress\",\"type\":\"address\"}],\"name\":\"OracleAddressUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentValueInProtocol\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newValueAdded\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_existingEzETHSupply\",\"type\":\"uint256\"}],\"name\":\"calculateMintAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ezETHBeingBurned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_existingEzETHSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentValueInProtocol\",\"type\":\"uint256\"}],\"name\":\"calculateRedeemAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"_roleManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"lookupTokenAmountFromValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"}],\"name\":\"lookupTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_balances\",\"type\":\"uint256[]\"}],\"name\":\"lookupTokenValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roleManager\",\"outputs\":[{\"internalType\":\"contract IRoleManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"_oracleAddress\",\"type\":\"address\"}],\"name\":\"setOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenOracleLookup\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract will be responsible for looking up values via Chainlink Data retrieved will be verified for liveness via a max age on the oracle lookup. All tokens should be denominated in the same base currency and contain the same decimals on the price lookup.\",\"errors\":{\"InvalidTokenDecimals(uint8,uint8)\":[{\"details\":\"Error for invalid token decimals for collateral tokens (must be 18)\"}],\"InvalidZeroInput()\":[{\"details\":\"Error for 0x0 address inputs\"}],\"MismatchedArrayLengths()\":[{\"details\":\"Error when array lengths do not match\"}],\"NotOracleAdmin()\":[{\"details\":\"Error when caller does not have Oracle Admin role\"}],\"OracleNotFound()\":[{\"details\":\"Error when price oracle is not configured\"}],\"OraclePriceExpired()\":[{\"details\":\"Error when price oracle data is stale\"}]},\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"OracleAddressUpdated(address,address)\":{\"details\":\"Event emitted when a token's oracle address is updated\"}},\"kind\":\"dev\",\"methods\":{\"calculateMintAmount(uint256,uint256,uint256)\":{\"details\":\"Given amount of current protocol value, new value being added, and supply of ezETH, determine amount to mint Values should be denominated in the same underlying currency with the same decimal precision\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\",\"details\":\"Prevents implementation contract from being initialized.\"},\"initialize(address)\":{\"details\":\"Initializes the contract with initial vars\"},\"lookupTokenAmountFromValue(address,uint256)\":{\"details\":\"Given a single token and value, return amount of tokens needed to represent that value Assumes the token value is already denominated in the same decimal precision as the oracle\"},\"lookupTokenValue(address,uint256)\":{\"details\":\"Given a single token and balance, return value of the asset in underlying currency The value returned will be denominated in the decimal precision of the lookup oracle (e.g. a value of 100 would return as 100 * 10^18)\"},\"setOracleAddress(address,address)\":{\"details\":\"Sets addresses for oracle lookup.  Permission gated to oracel admins only. Set to address 0x0 to disable lookups for the token.\"}},\"stateVariables\":{\"INVALID_0_INPUT\":{\"details\":\"Error for invalid 0x0 address\"},\"MAX_TIME_WINDOW\":{\"details\":\"The maxmimum staleness allowed for a price feed from chainlink\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"lookupTokenValues(address[],uint256[])\":{\"notice\":\"The value returned will be denominated in the decimal precision of the lookup oracle (e.g. a value of 100 would return as 100 * 10^18)\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Oracle/RenzoOracle.sol\":\"RenzoOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb82ef33f43b6b96109687d91b39c94573fdccaaa423fe28e8ba0977b31c023e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/Errors/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\n/// @dev Error for 0x0 address inputs\\nerror InvalidZeroInput();    \\n\\n/// @dev Error for already added items to a list\\nerror AlreadyAdded();    \\n\\n/// @dev Error for not found items in a list\\nerror NotFound();    \\n\\n/// @dev Error for hitting max TVL\\nerror MaxTVLReached();\\n\\n/// @dev Error for caller not having permissions\\nerror NotRestakeManagerAdmin();\\n\\n/// @dev Error for call not coming from deposit queue contract\\nerror NotDepositQueue();\\n\\n/// @dev Error for contract being paused\\nerror ContractPaused(); \\n\\n/// @dev Error for exceeding max basis points (100%)\\nerror OverMaxBasisPoints();\\n\\n/// @dev Error for invalid token decimals for collateral tokens (must be 18)\\nerror InvalidTokenDecimals(uint8 expected, uint8 actual);\\n\\n/// @dev Error when withdraw is already completed\\nerror WithdrawAlreadyCompleted();\\n\\n/// @dev Error when a different address tries to complete withdraw\\nerror NotOriginalWithdrawCaller(address expectedCaller);\\n\\n/// @dev Error when caller does not have OD admin role\\nerror NotOperatorDelegatorAdmin();\\n\\n/// @dev Error when caller does not have Oracle Admin role\\nerror NotOracleAdmin();\\n\\n/// @dev Error when caller is not RestakeManager contract\\nerror NotRestakeManager();\\n\\n/// @dev Errror when caller does not have ETH Restake Admin role\\nerror NotNativeEthRestakeAdmin();\\n\\n/// @dev Error when delegation address was already set - cannot be set again\\nerror DelegateAddressAlreadySet();\\n\\n/// @dev Error when caller does not have ERC20 Rewards Admin role\\nerror NotERC20RewardsAdmin();\\n\\n/// @dev Error when ending ETH fails\\nerror TransferFailed();\\n\\n/// @dev Error when caller does not have ETH Minter Burner Admin role\\nerror NotEzETHMinterBurner();\\n\\n/// @dev Error when caller does not have Token Admin role\\nerror NotTokenAdmin();\\n\\n/// @dev Error when price oracle is not configured\\nerror OracleNotFound();\\n\\n/// @dev Error when price oracle data is stale\\nerror OraclePriceExpired();\\n\\n/// @dev Error when array lengths do not match\\nerror MismatchedArrayLengths();\\n\\n/// @dev Error when caller does not have Deposit Withdraw Pauser role\\nerror NotDepositWithdrawPauser();\",\"keccak256\":\"0xcd647192cd7b75f8c5bbe0025961be050bac77adea8dee8ebd20f9cbf09d4e70\",\"license\":\"BUSL-1.1\"},\"contracts/Oracle/IRenzoOracle.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRenzoOracle {        \\n    function lookupTokenValue(IERC20 _token, uint256 _balance) external view returns (uint256);\\n    function lookupTokenAmountFromValue(IERC20 _token, uint256 _value) external view returns (uint256);\\n    function lookupTokenValues(IERC20[] memory _tokens, uint256[] memory _balances) external view returns (uint256);\\n    function calculateMintAmount(uint256 _currentValueInProtocol, uint256 _newValueAdded, uint256 _existingEzETHSupply) external pure returns (uint256);\\n    function calculateRedeemAmount(uint256 _ezETHBeingBurned, uint256 _existingEzETHSupply, uint256 _currentValueInProtocol) external pure returns (uint256) ;\\n}\",\"keccak256\":\"0x6015e00565df1fdba43b8d5cf4763903063e1f56584d96992d88f7264c6b488a\",\"license\":\"MIT\"},\"contracts/Oracle/RenzoOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"./RenzoOracleStorage.sol\\\";\\nimport \\\"./IRenzoOracle.sol\\\";\\nimport \\\"../Errors/Errors.sol\\\";\\n\\n/// @dev This contract will be responsible for looking up values via Chainlink\\n/// Data retrieved will be verified for liveness via a max age on the oracle lookup.\\n/// All tokens should be denominated in the same base currency and contain the same decimals on the price lookup.\\ncontract RenzoOracle is\\n    IRenzoOracle,\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    RenzoOracleStorageV1\\n{\\n    /// @dev Error for invalid 0x0 address\\n    string constant INVALID_0_INPUT = \\\"Invalid 0 input\\\";\\n\\n    // Scale factor for all values of prices\\n    uint256 constant SCALE_FACTOR = 10 ** 18;\\n\\n    /// @dev The maxmimum staleness allowed for a price feed from chainlink\\n    uint256 constant MAX_TIME_WINDOW = 86400 + 60; // 24 hours + 60 seconds\\n\\n    /// @dev Allows only a whitelisted address to configure the contract\\n    modifier onlyOracleAdmin() {\\n        if(!roleManager.isOracleAdmin(msg.sender)) revert NotOracleAdmin();\\n        _;\\n    }\\n\\n    /// @dev Event emitted when a token's oracle address is updated\\n    event OracleAddressUpdated(IERC20 token, AggregatorV3Interface oracleAddress);\\n\\n    /// @dev Prevents implementation contract from being initialized.\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @dev Initializes the contract with initial vars\\n    function initialize(IRoleManager _roleManager) public initializer {\\n        if(address(_roleManager) == address(0x0)) revert InvalidZeroInput();\\n\\n        __ReentrancyGuard_init();     \\n        \\n        roleManager = _roleManager;   \\n    }\\n\\n    /// @dev Sets addresses for oracle lookup.  Permission gated to oracel admins only.\\n    /// Set to address 0x0 to disable lookups for the token.\\n    function setOracleAddress(IERC20 _token, AggregatorV3Interface _oracleAddress) external nonReentrant onlyOracleAdmin { \\n        if(address(_token) == address(0x0)) revert InvalidZeroInput();\\n\\n        // Verify that the pricing of the oracle is 18 decimals - pricing calculations will be off otherwise\\n        if(_oracleAddress.decimals() != 18) revert InvalidTokenDecimals(18, _oracleAddress.decimals());\\n\\n        tokenOracleLookup[_token] = _oracleAddress;\\n        emit OracleAddressUpdated(_token, _oracleAddress);\\n    }\\n\\n    /// @dev Given a single token and balance, return value of the asset in underlying currency\\n    /// The value returned will be denominated in the decimal precision of the lookup oracle\\n    /// (e.g. a value of 100 would return as 100 * 10^18)\\n    function lookupTokenValue(IERC20 _token, uint256 _balance) public view returns (uint256) {           \\n        AggregatorV3Interface oracle = tokenOracleLookup[_token];\\n        if(address(oracle) == address(0x0)) revert OracleNotFound();\\n\\n        (, int256 price, , uint256 timestamp, ) = oracle.latestRoundData();\\n        if(timestamp < block.timestamp - MAX_TIME_WINDOW) revert OraclePriceExpired();\\n\\n        // Price is times 10**18 ensure value amount is scaled\\n        return uint256(price) * _balance / SCALE_FACTOR;\\n    }\\n\\n    /// @dev Given a single token and value, return amount of tokens needed to represent that value\\n    /// Assumes the token value is already denominated in the same decimal precision as the oracle\\n    function lookupTokenAmountFromValue(IERC20 _token, uint256 _value) external view returns (uint256) {           \\n        AggregatorV3Interface oracle = tokenOracleLookup[_token];\\n        if(address(oracle) == address(0x0)) revert OracleNotFound();\\n\\n        (, int256 price, , uint256 timestamp, ) = oracle.latestRoundData();\\n        if(timestamp < block.timestamp - MAX_TIME_WINDOW) revert OraclePriceExpired();\\n\\n        // Price is times 10**18 ensure token amount is scaled\\n        return _value * SCALE_FACTOR / uint256(price);\\n    }\\n\\n    // @dev Given list of tokens and balances, return total value (assumes all lookups are denomintated in same underlying currency)\\n    /// The value returned will be denominated in the decimal precision of the lookup oracle\\n    /// (e.g. a value of 100 would return as 100 * 10^18)\\n    function lookupTokenValues(IERC20[] memory _tokens, uint256[] memory _balances) external view returns (uint256) {\\n        if(_tokens.length != _balances.length) revert MismatchedArrayLengths();\\n\\n        uint256 totalValue = 0;\\n        uint256 tokenLength = _tokens.length;\\n        for (uint256 i = 0; i < tokenLength;) {\\n            totalValue += lookupTokenValue(_tokens[i], _balances[i]);\\n            unchecked{++i;}\\n        }\\n\\n        return totalValue;\\n    }\\n    \\n    /// @dev Given amount of current protocol value, new value being added, and supply of ezETH, determine amount to mint\\n    /// Values should be denominated in the same underlying currency with the same decimal precision\\n    function calculateMintAmount(uint256 _currentValueInProtocol, uint256 _newValueAdded, uint256 _existingEzETHSupply) external pure returns (uint256) {\\n        // For first mint, just return the new value added.\\n        // Checking both current value and existing supply to guard against gaming the initial mint\\n        if (_currentValueInProtocol == 0 || _existingEzETHSupply == 0) {\\n            return _newValueAdded; // value is priced in base units, so divide by scale factor\\n        }\\n        \\n        // Calculate the percentage of value after the deposit \\n        uint256 inflationPercentaage = SCALE_FACTOR * _newValueAdded / (_currentValueInProtocol + _newValueAdded);\\n\\n        // Calculate the new supply\\n        uint256 newEzETHSupply = (_existingEzETHSupply * SCALE_FACTOR) / (SCALE_FACTOR - inflationPercentaage);\\n\\n        // Subtract the old supply from the new supply to get the amount to mint\\n        return newEzETHSupply - _existingEzETHSupply;\\n    }\\n\\n    // Given the amount of ezETH to burn, the supply of ezETH, and the total value in the protocol, determine amount of value to return to user    \\n    function calculateRedeemAmount(uint256 _ezETHBeingBurned, uint256 _existingEzETHSupply, uint256 _currentValueInProtocol) external pure returns (uint256) {\\n      // This is just returning the percentage of TVL that matches the percentage of ezETH being burned \\n      return (_currentValueInProtocol * _ezETHBeingBurned) / _existingEzETHSupply;\\n    }\\n}\",\"keccak256\":\"0x302e285e31d8213b3945b16e96690f228c401d3b72a03ee53abf16e76a33c6e2\",\"license\":\"BUSL-1.1\"},\"contracts/Oracle/RenzoOracleStorage.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.19;\\n\\nimport \\\"../Permissions/IRoleManager.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract RenzoOracleStorageV1 {    \\n    /// @dev reference to the RoleManager contract\\n    IRoleManager public roleManager;\\n\\n    /// @dev The mapping of supported token addresses to their respective Chainlink oracle address\\n    mapping(IERC20 => AggregatorV3Interface) public tokenOracleLookup;\\n}\\n\",\"keccak256\":\"0xe232604cb5a959b49d5a6000c704787b7346bb2f9ddbad65e09bd39026d7d215\",\"license\":\"BUSL-1.1\"},\"contracts/Permissions/IRoleManager.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface IRoleManager {\\n    /// @dev Determines if the specified address has permissions to manage RoleManager\\n    /// @param potentialAddress Address to check\\n    function isRoleManagerAdmin(address potentialAddress) external view returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to mint or burn ezETH tokens\\n    /// @param potentialAddress Address to check\\n    function isEzETHMinterBurner(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update config on the OperatorDelgator Contracts\\n    /// @param potentialAddress Address to check\\n    function isOperatorDelegatorAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update config on the Oracle Contract config\\n    /// @param potentialAddress Address to check\\n    function isOracleAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update config on the Restake Manager\\n    /// @param potentialAddress Address to check\\n    function isRestakeManagerAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n\\n    /// @dev Determines if the specified address has permission to update config on the Token Contract\\n    /// @param potentialAddress Address to check\\n    function isTokenAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n    \\n    /// @dev Determines if the specified address has permission to trigger restaking of native ETH\\n    /// @param potentialAddress Address to check\\n    function isNativeEthRestakeAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);        \\n\\n    /// @dev Determines if the specified address has permission to sweep and deposit ERC20 Rewards\\n    /// @param potentialAddress Address to check\\n    function isERC20RewardsAdmin(address potentialAddress)\\n        external\\n        view\\n        returns (bool);        \\n    \\n    /// @dev Determines if the specified address has permission to pause deposits and withdraws\\n    /// @param potentialAddress Address to check\\n    function isDepositWithdrawPauser(address potentialAddress)\\n        external\\n        view\\n        returns (bool);\\n}\\n\",\"keccak256\":\"0xd2d340f92680be754fcf310ac593a07f8f0dc45db056caf7398e9791d95e8d43\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001961001e565b6100dd565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116146100db576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b610cf2806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100915760003560e01c80636f49d9f4116100665780636f49d9f41461010f5780638f686e6a14610138578063ba28a5711461014b578063c4d66de81461015e578063c5c83cb01461017157600080fd5b8062435da51461009657806252e3fd146100c657806337933625146100e757806346093b0e146100fa575b600080fd5b6033546100a9906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d96100d43660046108ec565b610184565b6040519081526020016100bd565b6100d96100f53660046108ec565b610283565b61010d610108366004610918565b61036c565b005b6100a961011d366004610951565b6034602052600090815260409020546001600160a01b031681565b6100d961014636600461096e565b610593565b6100d9610159366004610a70565b61061e565b61010d61016c366004610951565b6106ab565b6100d961017f36600461096e565b6107fe565b6001600160a01b03808316600090815260346020526040812054909116806101bf57604051630b0a0e0d60e21b815260040160405180910390fd5b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102249190610b51565b50935050925050620151bc4261023a9190610bb7565b81101561025a5760405163757ee0c360e11b815260040160405180910390fd5b670de0b6b3a764000061026d8684610bca565b6102779190610be1565b93505050505b92915050565b6001600160a01b03808316600090815260346020526040812054909116806102be57604051630b0a0e0d60e21b815260040160405180910390fd5b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156102ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103239190610b51565b50935050925050620151bc426103399190610bb7565b8110156103595760405163757ee0c360e11b815260040160405180910390fd5b8161026d670de0b6b3a764000087610bca565b61037461081d565b6033546040516368cce7c360e01b81523360048201526001600160a01b03909116906368cce7c390602401602060405180830381865afa1580156103bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e09190610c03565b6103fd5760405163be49bb1d60e01b815260040160405180910390fd5b6001600160a01b0382166104245760405163862a606760e01b815260040160405180910390fd5b806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104869190610c25565b60ff1660121461051f576012816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f49190610c25565b6040516330946b1f60e21b815260ff9283166004820152911660248201526044015b60405180910390fd5b6001600160a01b0382811660008181526034602090815260409182902080546001600160a01b031916948616948517905581519283528201929092527fd3afd1676752459d3aa8b6f73633fac8efd724610da9c4cd8d8e4fa1631841fb910160405180910390a161058f60018055565b5050565b60008315806105a0575081155b156105ac575081610617565b60006105b88486610c48565b6105ca85670de0b6b3a7640000610bca565b6105d49190610be1565b905060006105ea82670de0b6b3a7640000610bb7565b6105fc670de0b6b3a764000086610bca565b6106069190610be1565b90506106128482610bb7565b925050505b9392505050565b6000815183511461064257604051632b477e7160e11b815260040160405180910390fd5b8251600090815b818110156106a15761068d86828151811061066657610666610c5b565b602002602001015186838151811061068057610680610c5b565b6020026020010151610184565b6106979084610c48565b9250600101610649565b5090949350505050565b600054610100900460ff16158080156106cb5750600054600160ff909116105b806106e55750303b1580156106e5575060005460ff166001145b6107485760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610516565b6000805460ff19166001179055801561076b576000805461ff0019166101001790555b6001600160a01b0382166107925760405163862a606760e01b815260040160405180910390fd5b61079a61087c565b603380546001600160a01b0319166001600160a01b038416179055801561058f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60008261080b8584610bca565b6108159190610be1565b949350505050565b60026001540361086f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610516565b6002600155565b60018055565b600054610100900460ff166108a35760405162461bcd60e51b815260040161051690610c71565b6108ab6108ad565b565b600054610100900460ff166108765760405162461bcd60e51b815260040161051690610c71565b6001600160a01b03811681146108e957600080fd5b50565b600080604083850312156108ff57600080fd5b823561090a816108d4565b946020939093013593505050565b6000806040838503121561092b57600080fd5b8235610936816108d4565b91506020830135610946816108d4565b809150509250929050565b60006020828403121561096357600080fd5b8135610617816108d4565b60008060006060848603121561098357600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156109d9576109d961099a565b604052919050565b600067ffffffffffffffff8211156109fb576109fb61099a565b5060051b60200190565b600082601f830112610a1657600080fd5b81356020610a2b610a26836109e1565b6109b0565b82815260059290921b84018101918181019086841115610a4a57600080fd5b8286015b84811015610a655780358352918301918301610a4e565b509695505050505050565b60008060408385031215610a8357600080fd5b823567ffffffffffffffff80821115610a9b57600080fd5b818501915085601f830112610aaf57600080fd5b81356020610abf610a26836109e1565b82815260059290921b84018101918181019089841115610ade57600080fd5b948201945b83861015610b05578535610af6816108d4565b82529482019490820190610ae3565b96505086013592505080821115610b1b57600080fd5b50610b2885828601610a05565b9150509250929050565b805169ffffffffffffffffffff81168114610b4c57600080fd5b919050565b600080600080600060a08688031215610b6957600080fd5b610b7286610b32565b9450602086015193506040860151925060608601519150610b9560808701610b32565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b8181038181111561027d5761027d610ba1565b808202811582820484141761027d5761027d610ba1565b600082610bfe57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610c1557600080fd5b8151801515811461061757600080fd5b600060208284031215610c3757600080fd5b815160ff8116811461061757600080fd5b8082018082111561027d5761027d610ba1565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220b98baec05fc29601a511a44e7c3407c6d2c494e807642f06ef8b1865e5ebdf7d64736f6c63430008130033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100915760003560e01c80636f49d9f4116100665780636f49d9f41461010f5780638f686e6a14610138578063ba28a5711461014b578063c4d66de81461015e578063c5c83cb01461017157600080fd5b8062435da51461009657806252e3fd146100c657806337933625146100e757806346093b0e146100fa575b600080fd5b6033546100a9906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d96100d43660046108ec565b610184565b6040519081526020016100bd565b6100d96100f53660046108ec565b610283565b61010d610108366004610918565b61036c565b005b6100a961011d366004610951565b6034602052600090815260409020546001600160a01b031681565b6100d961014636600461096e565b610593565b6100d9610159366004610a70565b61061e565b61010d61016c366004610951565b6106ab565b6100d961017f36600461096e565b6107fe565b6001600160a01b03808316600090815260346020526040812054909116806101bf57604051630b0a0e0d60e21b815260040160405180910390fd5b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015610200573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102249190610b51565b50935050925050620151bc4261023a9190610bb7565b81101561025a5760405163757ee0c360e11b815260040160405180910390fd5b670de0b6b3a764000061026d8684610bca565b6102779190610be1565b93505050505b92915050565b6001600160a01b03808316600090815260346020526040812054909116806102be57604051630b0a0e0d60e21b815260040160405180910390fd5b600080826001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156102ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103239190610b51565b50935050925050620151bc426103399190610bb7565b8110156103595760405163757ee0c360e11b815260040160405180910390fd5b8161026d670de0b6b3a764000087610bca565b61037461081d565b6033546040516368cce7c360e01b81523360048201526001600160a01b03909116906368cce7c390602401602060405180830381865afa1580156103bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e09190610c03565b6103fd5760405163be49bb1d60e01b815260040160405180910390fd5b6001600160a01b0382166104245760405163862a606760e01b815260040160405180910390fd5b806001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610462573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104869190610c25565b60ff1660121461051f576012816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f49190610c25565b6040516330946b1f60e21b815260ff9283166004820152911660248201526044015b60405180910390fd5b6001600160a01b0382811660008181526034602090815260409182902080546001600160a01b031916948616948517905581519283528201929092527fd3afd1676752459d3aa8b6f73633fac8efd724610da9c4cd8d8e4fa1631841fb910160405180910390a161058f60018055565b5050565b60008315806105a0575081155b156105ac575081610617565b60006105b88486610c48565b6105ca85670de0b6b3a7640000610bca565b6105d49190610be1565b905060006105ea82670de0b6b3a7640000610bb7565b6105fc670de0b6b3a764000086610bca565b6106069190610be1565b90506106128482610bb7565b925050505b9392505050565b6000815183511461064257604051632b477e7160e11b815260040160405180910390fd5b8251600090815b818110156106a15761068d86828151811061066657610666610c5b565b602002602001015186838151811061068057610680610c5b565b6020026020010151610184565b6106979084610c48565b9250600101610649565b5090949350505050565b600054610100900460ff16158080156106cb5750600054600160ff909116105b806106e55750303b1580156106e5575060005460ff166001145b6107485760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610516565b6000805460ff19166001179055801561076b576000805461ff0019166101001790555b6001600160a01b0382166107925760405163862a606760e01b815260040160405180910390fd5b61079a61087c565b603380546001600160a01b0319166001600160a01b038416179055801561058f576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b60008261080b8584610bca565b6108159190610be1565b949350505050565b60026001540361086f5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610516565b6002600155565b60018055565b600054610100900460ff166108a35760405162461bcd60e51b815260040161051690610c71565b6108ab6108ad565b565b600054610100900460ff166108765760405162461bcd60e51b815260040161051690610c71565b6001600160a01b03811681146108e957600080fd5b50565b600080604083850312156108ff57600080fd5b823561090a816108d4565b946020939093013593505050565b6000806040838503121561092b57600080fd5b8235610936816108d4565b91506020830135610946816108d4565b809150509250929050565b60006020828403121561096357600080fd5b8135610617816108d4565b60008060006060848603121561098357600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156109d9576109d961099a565b604052919050565b600067ffffffffffffffff8211156109fb576109fb61099a565b5060051b60200190565b600082601f830112610a1657600080fd5b81356020610a2b610a26836109e1565b6109b0565b82815260059290921b84018101918181019086841115610a4a57600080fd5b8286015b84811015610a655780358352918301918301610a4e565b509695505050505050565b60008060408385031215610a8357600080fd5b823567ffffffffffffffff80821115610a9b57600080fd5b818501915085601f830112610aaf57600080fd5b81356020610abf610a26836109e1565b82815260059290921b84018101918181019089841115610ade57600080fd5b948201945b83861015610b05578535610af6816108d4565b82529482019490820190610ae3565b96505086013592505080821115610b1b57600080fd5b50610b2885828601610a05565b9150509250929050565b805169ffffffffffffffffffff81168114610b4c57600080fd5b919050565b600080600080600060a08688031215610b6957600080fd5b610b7286610b32565b9450602086015193506040860151925060608601519150610b9560808701610b32565b90509295509295909350565b634e487b7160e01b600052601160045260246000fd5b8181038181111561027d5761027d610ba1565b808202811582820484141761027d5761027d610ba1565b600082610bfe57634e487b7160e01b600052601260045260246000fd5b500490565b600060208284031215610c1557600080fd5b8151801515811461061757600080fd5b600060208284031215610c3757600080fd5b815160ff8116811461061757600080fd5b8082018082111561027d5761027d610ba1565b634e487b7160e01b600052603260045260246000fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220b98baec05fc29601a511a44e7c3407c6d2c494e807642f06ef8b1865e5ebdf7d64736f6c63430008130033",
  "devdoc": {
    "details": "This contract will be responsible for looking up values via Chainlink Data retrieved will be verified for liveness via a max age on the oracle lookup. All tokens should be denominated in the same base currency and contain the same decimals on the price lookup.",
    "errors": {
      "InvalidTokenDecimals(uint8,uint8)": [
        {
          "details": "Error for invalid token decimals for collateral tokens (must be 18)"
        }
      ],
      "InvalidZeroInput()": [
        {
          "details": "Error for 0x0 address inputs"
        }
      ],
      "MismatchedArrayLengths()": [
        {
          "details": "Error when array lengths do not match"
        }
      ],
      "NotOracleAdmin()": [
        {
          "details": "Error when caller does not have Oracle Admin role"
        }
      ],
      "OracleNotFound()": [
        {
          "details": "Error when price oracle is not configured"
        }
      ],
      "OraclePriceExpired()": [
        {
          "details": "Error when price oracle data is stale"
        }
      ]
    },
    "events": {
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "OracleAddressUpdated(address,address)": {
        "details": "Event emitted when a token's oracle address is updated"
      }
    },
    "kind": "dev",
    "methods": {
      "calculateMintAmount(uint256,uint256,uint256)": {
        "details": "Given amount of current protocol value, new value being added, and supply of ezETH, determine amount to mint Values should be denominated in the same underlying currency with the same decimal precision"
      },
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor",
        "details": "Prevents implementation contract from being initialized."
      },
      "initialize(address)": {
        "details": "Initializes the contract with initial vars"
      },
      "lookupTokenAmountFromValue(address,uint256)": {
        "details": "Given a single token and value, return amount of tokens needed to represent that value Assumes the token value is already denominated in the same decimal precision as the oracle"
      },
      "lookupTokenValue(address,uint256)": {
        "details": "Given a single token and balance, return value of the asset in underlying currency The value returned will be denominated in the decimal precision of the lookup oracle (e.g. a value of 100 would return as 100 * 10^18)"
      },
      "setOracleAddress(address,address)": {
        "details": "Sets addresses for oracle lookup.  Permission gated to oracel admins only. Set to address 0x0 to disable lookups for the token."
      }
    },
    "stateVariables": {
      "INVALID_0_INPUT": {
        "details": "Error for invalid 0x0 address"
      },
      "MAX_TIME_WINDOW": {
        "details": "The maxmimum staleness allowed for a price feed from chainlink"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "lookupTokenValues(address[],uint256[])": {
        "notice": "The value returned will be denominated in the decimal precision of the lookup oracle (e.g. a value of 100 would return as 100 * 10^18)"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 461,
        "contract": "contracts/Oracle/RenzoOracle.sol:RenzoOracle",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 464,
        "contract": "contracts/Oracle/RenzoOracle.sol:RenzoOracle",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 637,
        "contract": "contracts/Oracle/RenzoOracle.sol:RenzoOracle",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 706,
        "contract": "contracts/Oracle/RenzoOracle.sol:RenzoOracle",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 11180,
        "contract": "contracts/Oracle/RenzoOracle.sol:RenzoOracle",
        "label": "roleManager",
        "offset": 0,
        "slot": "51",
        "type": "t_contract(IRoleManager)11263"
      },
      {
        "astId": 11187,
        "contract": "contracts/Oracle/RenzoOracle.sol:RenzoOracle",
        "label": "tokenOracleLookup",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_contract(IERC20)3540,t_contract(AggregatorV3Interface)45)"
      }
    ],
    "types": {
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3540": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IRoleManager)11263": {
        "encoding": "inplace",
        "label": "contract IRoleManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20)3540,t_contract(AggregatorV3Interface)45)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)3540",
        "label": "mapping(contract IERC20 => contract AggregatorV3Interface)",
        "numberOfBytes": "32",
        "value": "t_contract(AggregatorV3Interface)45"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}